head	1.74;
access;
symbols;
locks; strict;
comment	@ * @;


1.74
date	96.04.08.00.06.01;	author ldl;	state Exp;
branches;
next	1.73;

1.73
date	96.03.08.12.54.02;	author ldl;	state Exp;
branches;
next	1.72;

1.72
date	96.01.31.12.06.08;	author ldl;	state Exp;
branches;
next	1.71;

1.71
date	96.01.17.09.44.29;	author ldl;	state Exp;
branches;
next	1.70;

1.70
date	95.11.20.18.53.07;	author ldl;	state Exp;
branches;
next	1.69;

1.69
date	95.11.11.11.15.16;	author ldl;	state Exp;
branches;
next	1.68;

1.68
date	95.11.03.09.20.16;	author ldl;	state Exp;
branches;
next	1.67;

1.67
date	95.10.24.08.27.43;	author ldl;	state Exp;
branches;
next	1.66;

1.66
date	95.10.23.09.19.41;	author ldl;	state Exp;
branches;
next	1.65;

1.65
date	95.10.19.02.07.31;	author ldl;	state Exp;
branches;
next	1.64;

1.64
date	95.09.28.09.40.13;	author ldl;	state Exp;
branches;
next	1.63;

1.63
date	95.09.19.10.41.34;	author ldl;	state Exp;
branches;
next	1.62;

1.62
date	95.09.11.10.27.17;	author ldl;	state Exp;
branches;
next	1.61;

1.61
date	95.09.08.10.47.04;	author ldl;	state Exp;
branches;
next	1.60;

1.60
date	95.09.06.10.46.02;	author ldl;	state Exp;
branches;
next	1.59;

1.59
date	95.09.05.11.44.04;	author ldl;	state Exp;
branches;
next	1.58;

1.58
date	95.09.04.12.12.47;	author ldl;	state Exp;
branches;
next	1.57;

1.57
date	95.08.02.12.39.02;	author ldl;	state Exp;
branches;
next	1.56;

1.56
date	95.08.01.11.52.09;	author ldl;	state Exp;
branches;
next	1.55;

1.55
date	95.07.21.12.24.51;	author ldl;	state Exp;
branches;
next	1.54;

1.54
date	95.07.18.12.39.33;	author ldl;	state Exp;
branches;
next	1.53;

1.53
date	95.07.17.12.40.53;	author ldl;	state Exp;
branches;
next	1.52;

1.52
date	95.07.12.14.07.20;	author ldl;	state Exp;
branches;
next	1.51;

1.51
date	95.07.05.12.50.50;	author ldl;	state Exp;
branches;
next	1.50;

1.50
date	95.07.03.12.17.43;	author ldl;	state Exp;
branches;
next	1.49;

1.49
date	95.06.30.11.14.48;	author ldl;	state Exp;
branches;
next	1.48;

1.48
date	95.06.29.09.14.24;	author ldl;	state Exp;
branches;
next	1.47;

1.47
date	95.06.28.09.53.06;	author ldl;	state Exp;
branches;
next	1.46;

1.46
date	95.06.23.11.19.27;	author ldl;	state Exp;
branches;
next	1.45;

1.45
date	95.06.21.12.41.01;	author ldl;	state Exp;
branches;
next	1.44;

1.44
date	95.06.20.12.17.34;	author ldl;	state Exp;
branches;
next	1.43;

1.43
date	95.06.15.09.12.47;	author ldl;	state Exp;
branches;
next	1.42;

1.42
date	95.06.14.08.57.38;	author ldl;	state Exp;
branches;
next	1.41;

1.41
date	95.06.12.11.37.05;	author ldl;	state Exp;
branches;
next	1.40;

1.40
date	95.06.12.09.15.33;	author ldl;	state Exp;
branches;
next	1.39;

1.39
date	95.06.09.11.19.45;	author ldl;	state Exp;
branches;
next	1.38;

1.38
date	95.06.06.11.47.22;	author ldl;	state Exp;
branches;
next	1.37;

1.37
date	95.05.15.10.22.15;	author ldl;	state Exp;
branches;
next	1.36;

1.36
date	95.05.02.10.43.22;	author ldl;	state Exp;
branches;
next	1.35;

1.35
date	95.04.25.11.48.30;	author ldl;	state Exp;
branches;
next	1.34;

1.34
date	95.04.24.12.23.17;	author ldl;	state Exp;
branches;
next	1.33;

1.33
date	95.04.23.12.55.16;	author ldl;	state Exp;
branches;
next	1.32;

1.32
date	95.04.22.12.42.54;	author ldl;	state Exp;
branches;
next	1.31;

1.31
date	95.04.19.11.29.11;	author ldl;	state Exp;
branches;
next	1.30;

1.30
date	95.04.18.12.00.42;	author ldl;	state Exp;
branches;
next	1.29;

1.29
date	95.04.13.10.23.58;	author ldl;	state Exp;
branches;
next	1.28;

1.28
date	95.04.03.11.47.13;	author ldl;	state Exp;
branches;
next	1.27;

1.27
date	95.03.27.03.06.29;	author ldl;	state Exp;
branches;
next	1.26;

1.26
date	95.03.26.19.58.15;	author ldl;	state Exp;
branches;
next	1.25;

1.25
date	95.03.23.13.31.35;	author ldl;	state Exp;
branches;
next	1.24;

1.24
date	95.03.19.23.29.20;	author ldl;	state Exp;
branches;
next	1.23;

1.23
date	95.03.08.13.33.30;	author ldl;	state Exp;
branches;
next	1.22;

1.22
date	95.03.06.12.00.18;	author ldl;	state Exp;
branches;
next	1.21;

1.21
date	95.03.06.10.31.59;	author ldl;	state Exp;
branches;
next	1.20;

1.20
date	95.03.05.03.24.38;	author ldl;	state Exp;
branches;
next	1.19;

1.19
date	95.03.03.12.36.20;	author ldl;	state Exp;
branches;
next	1.18;

1.18
date	95.02.27.12.55.29;	author ldl;	state Exp;
branches;
next	1.17;

1.17
date	95.02.26.10.54.29;	author ldl;	state Exp;
branches;
next	1.16;

1.16
date	95.01.07.15.34.54;	author ldl;	state Exp;
branches;
next	1.15;

1.15
date	95.01.07.11.22.37;	author ldl;	state Exp;
branches;
next	1.14;

1.14
date	94.12.31.02.31.32;	author ldl;	state Exp;
branches;
next	1.13;

1.13
date	94.12.30.21.01.52;	author ldl;	state Exp;
branches;
next	1.12;

1.12
date	94.12.27.04.07.26;	author ldl;	state Exp;
branches;
next	1.11;

1.11
date	94.12.26.23.53.01;	author ldl;	state Exp;
branches;
next	1.10;

1.10
date	94.12.16.07.22.20;	author ldl;	state Exp;
branches;
next	1.9;

1.9
date	94.12.15.23.42.30;	author ldl;	state Exp;
branches;
next	1.8;

1.8
date	94.12.04.07.22.26;	author ldl;	state Exp;
branches;
next	1.7;

1.7
date	94.12.02.07.12.51;	author ldl;	state Exp;
branches;
next	1.6;

1.6
date	94.12.01.07.06.01;	author ldl;	state Exp;
branches;
next	1.5;

1.5
date	94.11.28.05.26.51;	author ldl;	state Exp;
branches;
next	1.4;

1.4
date	94.11.26.08.23.57;	author ldl;	state Exp;
branches;
next	1.3;

1.3
date	94.11.22.14.26.56;	author ldl;	state Exp;
branches;
next	1.2;

1.2
date	94.11.19.06.22.09;	author ldl;	state Exp;
branches;
next	1.1;

1.1
date	94.11.16.13.07.11;	author ldl;	state Exp;
branches;
next	;


desc
@@


1.74
log
@1996-Apr-07 Checkpoint
@
text
@/***
 * $Source: /home/ldl/dbl/cdbl/RCS/node.h,v $
 * $Revision: 1.73 $ $Date: 1996/03/08 12:54:02 $
 */

#ifndef	_NODE_H_
#define _NODE_H_

#include <stdio.h>
#include "prototype.h"

/***
 *	This defines a "tangled net" structure.
 *
 * Synopsis:
 *
 *	void
 *	node_init(m_node)		// Initialize node table
 *	  int       m_node;		// Initial size of node table
 *
 *	void
 *	node_print(f, b_node, e_node)	// Print node table
 *	  FILE     *f;			// File descriptor to write to
 *	  Node_id   b_node;		// Beginning node to print
 *	  Node_id   e_node;		// Ending node to print
 *					// (e_node == -1, dump to last used)
 *	void
 *	node_trace(f, b_node, levels)	// Print node table via relations
 *	  FILE     *f;			// File descriptor to write to
 *	  Node_id   b_node;		// Beginning node to print
 *	  int       levels;		// Levels of relationship to trace
 *					// Note: levels=-1, all levels
 *	void
 *	node_usage(m_node, n_node)	// Get usage for statistics
 *	  Node_id  *m_node;		// Current allocation
 *	  Node_id  *n_node;		// Next node to allocate
 *
 *	char *				// static string for token
 *	to_token(tok)			// Decode (to readable) value of token
 *	  int       tok;		// Token id (to decode)
 *
 *	Node_id
 *	nn(void)			// Create a new node
 *
 *	void
 *	ns(n, type, value)		// Set node type/value
 *	  Node_id   n;			// Node to set type/value into
 *	  int       type;		// Token/Node type
 *	  char     *value;		// Value of node
 *
 *	void
 *	nsv(n, type, value)		// Set node type/value (not relations)
 *	  Node_id   n;			// Node to set type/value into
 *	  int       type;		// Token/Node type
 *	  char     *value;		// Value of node
 *
 *	void
 *	ng(n, type, value)		// Get node type/value
 *	  Node_id   n;			// Node to get type/value from
 *	  int      *type;		// Addr to receive Token/Node type
 *	  char    **value;		// Addr to receive Value of node
 *
 *	void
 *	rs(n, rel, m)			// Set relation of node to node
 *	  Node_id   n;			// Node to add relation to
 *	  int       rel;		// Relationship of m to n
 *	  Node_id   m;			// Node being related to
 *
 *	int 				// Next Relation (0 means end)
 *	rn(n, rel)			// Get next relation name after rel
 *	  Node_id   n;			// Node to find relationship in
 *	  int       rel;		// Relationship "seed"
 *
 *	Node_id
 *	rnn(n, rel, m)			// Get next node (following rel/m)
 *	  Node_id   n;			// Node to find relationship in
 *	  int       rel;		// Relationship (must exist)
 *	  Node_id   m;			// Node "seed"
 *
 *	void
 *	rk(n, rel, m)			// Kill node [rel [m]]
 *	  Node_id   n;			// Node to add relation to
 *	  int       rel;		// Relationship of m to n
 *	  Node_id   m;			// Node being related to
 *
 * Note:
 *
 *	The "type" of a node is not represented in the ^NET, but is
 *	possibly interesting and helpful.
 *
 *	Function			M Equivalent
 *	-----------------------------	----------------------------------
 *	nn()				S (%n,^NET)=1+^NET
 *	ns(n, type, value)		S ^NET(n)=value
 *	ng(n, type, value)		S value=^NET(n)
 *	rs(n, rel, m)			S ^NET(n,rel,m)=""
 *	rn(n, rel)			$O(^NET(n,rel))
 *	rnn(n, rel, m)			$O(^NET(n,rel,m))
 *	rk(n, rel, m)			I $D(rel) D
 *		.			. I $D(m) K ^NET(n,rel,m)
 *		.			. E K ^NET(n,rel)
 *		.			E  K ^NET(n)
 * Note:
 *	Current implementation is to use a large vector of Node
 */

typedef
struct					/* Token			*/
  {					/* ----------------------------	*/
    int       token_id;			/* T_xxx value			*/
    char     *token_value;		/* NULL for non-value token	*/
  }       Token;


typedef int       Node_id;
#define MAX_NODE_ID	(((unsigned)1 << (8 * sizeof(Node_id) - 1)) - 1)
#define NET_INITIAL_SIZE	10000
#define NET_GROW	 	 1000

#define NIL	0			/* This is for convenience	*/

typedef
struct					/* Struct: Node			*/
  {					/* ----------------------------	*/
    int       n_type;			/* Type of node (T_xxx tokens)	*/
    union				/*				*/
      {					/* Variants:			*/
        struct				/* n_type == T__RELATIONSHIP	*/
	  {				/* ---------------------------- */
	    int       _n_relation;	/* Relationship id		*/
	    int       _n_relative;	/* Target of relationship	*/
	    Node_id   _n_parent;	/* Parent of relationship list	*/
	    Node_id   _n_prev;		/* Previous node in list	*/
	    Node_id   _n_next;		/* Next node in list		*/
	  }       _n_chain;		/*				*/
	struct				/* n_type != T__RELATIONSHIP	*/
	  {				/* ----------------------------	*/
	    char     *_n_value;		/* Value node			*/
	    Node_id   _n_first;		/* Relationships to node	*/
	    Node_id   _n_last;		/* Last relationship		*/
	  }       _n_data;		/*				*/
      }       _n_variant;		/*				*/
  }       Node;				/*				*/
#define n_relation	_n_variant._n_chain._n_relation
#define n_relative	_n_variant._n_chain._n_relative
#define n_parent	_n_variant._n_chain._n_parent
#define n_prev		_n_variant._n_chain._n_prev
#define n_next		_n_variant._n_chain._n_next
#define n_value		_n_variant._n_data._n_value
#define n_first		_n_variant._n_data._n_first
#define n_last		_n_variant._n_data._n_last


/**
 *	Node function prototypes.
 */
void      node_init	PROTOARGS((int));
void      node_print	PROTOARGS((FILE *, Node_id, Node_id));
void      node_usage	PROTOARGS((Node_id *, Node_id *));
char     *to_token	PROTOARGS((int));
Node_id   nn		PROTOARGS((void));
void      ns		PROTOARGS((Node_id, int, char *));
void      nsv		PROTOARGS((Node_id, int, char *));
void      ng		PROTOARGS((Node_id, int *, char **));
void      rs		PROTOARGS((Node_id, int, Node_id));
int       rn		PROTOARGS((Node_id, int));
Node_id   rnn		PROTOARGS((Node_id, int, Node_id));
void      rk		PROTOARGS((Node_id, int, Node_id));

SC
Node     *net IS(= (Node *)NULL);	/* The node table		*/


#endif/*_NODE_H_*/


/* End of $Source: /home/ldl/dbl/cdbl/RCS/node.h,v $ */
@


1.73
log
@1996-Mar-08 Checkpoint
@
text
@d3 1
a3 1
 * $Revision: 1.72 $ $Date: 1996/01/31 12:06:08 $
@


1.72
log
@1996-Jan-31 Checkpoint
@
text
@d3 1
a3 1
 * $Revision: 1.71 $ $Date: 1996/01/17 09:44:29 $
@


1.71
log
@1996-Jan-17 Checkpoint
@
text
@d3 1
a3 1
 * $Revision: 1.70 $ $Date: 1995/11/20 18:53:07 $
@


1.70
log
@1995-Nov-20 Checkpoint
@
text
@d3 1
a3 1
 * $Revision: 1.69 $ $Date: 1995/11/11 11:15:16 $
@


1.69
log
@1995-Nov-11 Checkpoint
@
text
@d3 1
a3 1
 * $Revision: 1.68 $ $Date: 1995/11/03 09:20:16 $
@


1.68
log
@1995-Nov-03 Checkpoint
@
text
@d3 1
a3 1
 * $Revision: 1.67 $ $Date: 1995/10/24 08:27:43 $
@


1.67
log
@1995-Oct-24 Checkpoint
@
text
@d3 1
a3 1
 * $Revision: 1.66 $ $Date: 1995/10/23 09:19:41 $
@


1.66
log
@1995-Oct-23 Checkpoint
@
text
@d3 1
a3 1
 * $Revision: 1.65 $ $Date: 1995/10/19 02:07:31 $
@


1.65
log
@1995-Oct-18 Checkpoint
@
text
@d3 1
a3 1
 * $Revision: 1.64 $ $Date: 1995/09/28 09:40:13 $
@


1.64
log
@1995-Sep-28 Checkpoint
@
text
@d3 1
a3 1
 * $Revision: 1.63 $ $Date: 1995/09/19 10:41:34 $
@


1.63
log
@1995-Sep-19 Checkpoint
@
text
@d3 1
a3 1
 * $Revision: 1.62 $ $Date: 1995/09/11 10:27:17 $
@


1.62
log
@1995-Sep-11 Checkpoint
@
text
@d3 1
a3 1
 * $Revision: 1.61 $ $Date: 1995/09/08 10:47:04 $
@


1.61
log
@1995-Sep-08 Checkpoint
@
text
@d3 1
a3 1
 * $Revision: 1.60 $ $Date: 1995/09/06 10:46:02 $
d52 6
d163 1
@


1.60
log
@1995-Sep-06 Checkpoint
@
text
@d3 1
a3 1
 * $Revision: 1.59 $ $Date: 1995/09/05 11:44:04 $
@


1.59
log
@1995-Sep-05 Checkpoint
@
text
@d3 1
a3 1
 * $Revision: 1.58 $ $Date: 1995/09/04 12:12:47 $
@


1.58
log
@1995-Sep-04 Checkpoint
@
text
@d3 1
a3 1
 * $Revision: 1.57 $ $Date: 1995/08/02 12:39:02 $
@


1.57
log
@1995-Aug-02 Checkpoint
@
text
@d3 1
a3 1
 * $Revision: 1.56 $ $Date: 1995/08/01 11:52:09 $
@


1.56
log
@1995-Aug-01 Checkpoint
@
text
@d3 1
a3 1
 * $Revision: 1.55 $ $Date: 1995/07/21 12:24:51 $
@


1.55
log
@1995-Jul-21 Checkpoint
@
text
@d3 1
a3 1
 * $Revision: 1.54 $ $Date: 1995/07/18 12:39:33 $
@


1.54
log
@1995-Jul-18 Checkpoint
@
text
@d3 1
a3 1
 * $Revision: 1.53 $ $Date: 1995/07/17 12:40:53 $
@


1.53
log
@1995-Jul-17 Checkpoint
@
text
@d3 1
a3 1
 * $Revision: 1.52 $ $Date: 1995/07/12 14:07:20 $
@


1.52
log
@1995-Jul-12 Checkpoint
@
text
@d3 1
a3 1
 * $Revision: 1.51 $ $Date: 1995/07/05 12:50:50 $
@


1.51
log
@1995-Jul-05 Checkpoint
@
text
@d3 1
a3 1
 * $Revision: 1.50 $ $Date: 1995/07/03 12:17:43 $
@


1.50
log
@1995-Jul-03 Checkpoint
@
text
@d3 1
a3 1
 * $Revision: 1.49 $ $Date: 1995/06/30 11:14:48 $
@


1.49
log
@1995-Jun-30 Checkpoint
@
text
@d3 1
a3 1
 * $Revision: 1.48 $ $Date: 1995/06/29 09:14:24 $
@


1.48
log
@1995-Jun-29 Checkpoint
@
text
@d3 1
a3 1
 * $Revision: 1.47 $ $Date: 1995/06/28 09:53:06 $
@


1.47
log
@1995-Jun-28 Checkpoint. Happy 17th birthday, Kara\!
@
text
@d3 1
a3 1
 * $Revision: 1.46 $ $Date: 1995/06/23 11:19:27 $
@


1.46
log
@1995-Jun-23 Checkpoint
@
text
@d3 1
a3 1
 * $Revision: 1.45 $ $Date: 1995/06/21 12:41:01 $
@


1.45
log
@1995-Jun-21 Checkpoint. hello.dbl runs\!
@
text
@d3 1
a3 1
 * $Revision: 1.44 $ $Date: 1995/06/20 12:17:34 $
@


1.44
log
@1995-Jun-20 Checkpoint
@
text
@d3 1
a3 1
 * $Revision: 1.43 $ $Date: 1995/06/15 09:12:47 $
@


1.43
log
@1995-Jun-15 Checkpoint
@
text
@d3 1
a3 1
 * $Revision: 1.42 $ $Date: 1995/06/14 08:57:38 $
@


1.42
log
@1995-Jun-14 Checkpoint
@
text
@d3 1
a3 1
 * $Revision: 1.41 $ $Date: 1995/06/12 11:37:05 $
@


1.41
log
@1995-Jun-12 Checkpoint 2
@
text
@d3 1
a3 1
 * $Revision: 1.40 $ $Date: 1995/06/12 09:15:33 $
@


1.40
log
@1995-Jun-12 Checkpoint
@
text
@d3 1
a3 1
 * $Revision: 1.39 $ $Date: 1995/06/09 11:19:45 $
@


1.39
log
@1995-Jun-09 Checkpoint
@
text
@d3 1
a3 1
 * $Revision: 1.38 $ $Date: 1995/06/06 11:47:22 $
@


1.38
log
@1995-Jun-06 Checkpoint
@
text
@d3 1
a3 1
 * $Revision: 1.37 $ $Date: 1995/05/15 10:22:15 $
@


1.37
log
@1995-May-15 Checkpoint
@
text
@d2 2
a3 2
 * $Locker: ldl $ $Source: /home/ldl/dbl/cdbl/RCS/node.h,v $
 * $Header: /home/ldl/dbl/cdbl/RCS/node.h,v 1.36 1995/05/02 10:43:22 ldl Exp ldl $
@


1.36
log
@1995-May-02 Checkpoint
@
text
@d3 1
a3 1
 * $Header: /home/ldl/dbl/cdbl/RCS/node.h,v 1.35 1995/04/25 11:48:30 ldl Exp ldl $
@


1.35
log
@1995-Apr-25 Checkpoint
@
text
@d3 1
a3 1
 * $Header: /home/ldl/dbl/cdbl/RCS/node.h,v 1.34 1995/04/24 12:23:17 ldl Exp ldl $
@


1.34
log
@1995-Apr-24 Checkpoint
@
text
@d3 1
a3 1
 * $Header: /home/ldl/dbl/cdbl/RCS/node.h,v 1.33 1995/04/23 12:55:16 ldl Exp ldl $
@


1.33
log
@1995-Apr-23 Checkpoint (a.m.)
@
text
@d3 1
a3 1
 * $Header: /home/ldl/dbl/cdbl/RCS/node.h,v 1.32 1995/04/22 12:42:54 ldl Exp ldl $
@


1.32
log
@1995-Apr-22 Checkpoint (a.m.)
@
text
@d3 1
a3 1
 * $Header: /home/ldl/dbl/cdbl/RCS/node.h,v 1.31 1995/04/19 11:29:11 ldl Exp ldl $
@


1.31
log
@1995-Apr-19 Checkpoint
@
text
@d3 1
a3 1
 * $Header: /home/ldl/dbl/cdbl/RCS/node.h,v 1.30 1995/04/18 12:00:42 ldl Exp ldl $
@


1.30
log
@1995-Apr-18 Checkpoint
@
text
@d3 1
a3 1
 * $Header: /home/ldl/dbl/cdbl/RCS/node.h,v 1.29 1995/04/13 10:23:58 ldl Exp ldl $
@


1.29
log
@1995-Apr-13 Checkpoint
@
text
@d3 1
a3 1
 * $Header: /home/ldl/dbl/cdbl/RCS/node.h,v 1.28 1995/04/03 11:47:13 ldl Exp ldl $
@


1.28
log
@1995-Apr-03 Checkpoint.
@
text
@d3 1
a3 1
 * $Header: /home/ldl/dbl/cdbl/RCS/node.h,v 1.27 1995/03/27 03:06:29 ldl Exp ldl $
@


1.27
log
@26-Mar-1995 Checkpoint 2
@
text
@d3 1
a3 1
 * $Header: /home/ldl/dbl/cdbl/RCS/node.h,v 1.26 1995/03/26 19:58:15 ldl Exp ldl $
@


1.26
log
@26-Mar-1995 Checkpoint 1
@
text
@d3 1
a3 1
 * $Header: /home/ldl/dbl/cdbl/RCS/node.h,v 1.25 1995/03/23 13:31:35 ldl Exp ldl $
@


1.25
log
@23-Mar-1995 Checkpoint
@
text
@d3 1
a3 1
 * $Header: /home/ldl/dbl/cdbl/RCS/node.h,v 1.24 1995/03/19 23:29:20 ldl Exp ldl $
@


1.24
log
@19-Mar-1995 Checkpoint
@
text
@d3 1
a3 1
 * $Header: /home/ldl/dbl/cdbl/RCS/node.h,v 1.23 1995/03/08 13:33:30 ldl Exp ldl $
@


1.23
log
@08-Mar-1995 Checkpoint
@
text
@d3 1
a3 1
 * $Header: /home/ldl/dbl/cdbl/RCS/node.h,v 1.22 1995/03/06 12:00:18 ldl Exp ldl $
@


1.22
log
@06-Mar-1995 Checkpoint 2
@
text
@d3 1
a3 1
 * $Header: /home/ldl/dbl/cdbl/RCS/node.h,v 1.21 1995/03/06 10:31:59 ldl Exp ldl $
@


1.21
log
@06-Mar-1995 Checkpoint
@
text
@d3 1
a3 1
 * $Header: /home/ldl/dbl/cdbl/RCS/node.h,v 1.20 1995/03/05 03:24:38 ldl Exp ldl $
@


1.20
log
@04-Mar-1995 Checkpoint
@
text
@d3 1
a3 1
 * $Header: /home/ldl/dbl/cdbl/RCS/node.h,v 1.19 1995/03/03 12:36:20 ldl Exp ldl $
@


1.19
log
@03-Mar-1995 Checkpoint
@
text
@d3 1
a3 1
 * $Header: /home/ldl/dbl/cdbl/RCS/node.h,v 1.18 1995/02/27 12:55:29 ldl Exp ldl $
@


1.18
log
@27-Feb-1995 Checkpoint
@
text
@d3 1
a3 1
 * $Header: /home/ldl/dbl/cdbl/RCS/node.h,v 1.17 1995/02/26 10:54:29 ldl Exp ldl $
@


1.17
log
@26-Feb-1995 Checkpoint
@
text
@d3 1
a3 1
 * $Header: /home/ldl/dbl/cdbl/RCS/node.h,v 1.16 1995/01/07 15:34:54 ldl Exp ldl $
a15 4
 *
 *	Node_id				// New node
 *	mkid(token)			// Create node value using token
 *	  Token     token;		// Token type/value
@


1.16
log
@07-Jan-1995 Checkpoint 2
@
text
@d3 1
a3 1
 * $Header: /home/ldl/dbl/cdbl/RCS/node.h,v 1.15 1995/01/07 11:22:37 ldl Exp ldl $
d16 4
@


1.15
log
@07-Jan-1995 Checkpoint 1
@
text
@d3 1
a3 1
 * $Header: /home/ldl/dbl/cdbl/RCS/node.h,v 1.14 1994/12/31 02:31:32 ldl Exp ldl $
@


1.14
log
@30-Dec-1994 Checkpoint 2
@
text
@d3 1
a3 1
 * $Header: /home/ldl/dbl/cdbl/RCS/node.h,v 1.13 1994/12/30 21:01:52 ldl Exp ldl $
@


1.13
log
@30-Dec-1994 Checkpoint 1
@
text
@d3 1
a3 1
 * $Header: /home/ldl/dbl/cdbl/RCS/node.h,v 1.12 1994/12/27 04:07:26 ldl Exp ldl $
@


1.12
log
@26-Dec-1994 Checkpoint 2
@
text
@d3 1
a3 1
 * $Header: /home/ldl/dbl/cdbl/RCS/node.h,v 1.11 1994/12/26 23:53:01 ldl Exp ldl $
d38 4
d154 1
@


1.11
log
@26-Dec-1994 Checkpoint 1
@
text
@d3 1
a3 1
 * $Header: /home/ldl/dbl/cdbl/RCS/node.h,v 1.10 1994/12/16 07:22:20 ldl Exp ldl $
@


1.10
log
@15-Dec-1994 late
@
text
@d3 1
a3 1
 * $Header: /home/ldl/dbl/cdbl/RCS/node.h,v 1.9 1994/12/15 23:42:30 ldl Exp ldl $
d19 1
a19 1
 *	  Node_id   m_node;		// Initial size of node table
d147 1
a147 1
void      node_init	PROTOARGS((Node_id));
@


1.9
log
@15-Dec-1994 Checkpoint
@
text
@d3 1
a3 1
 * $Header: /home/ldl/dbl/cdbl/RCS/node.h,v 1.8 1994/12/04 07:22:26 ldl Exp ldl $
@


1.8
log
@03-Dec-94 Checkpoint
@
text
@d2 2
a3 2
 * $Locker: ldl $ $Source: /home/ldl/dbl/RCS/node.h,v $
 * $Header: /home/ldl/dbl/RCS/node.h,v 1.7 1994/12/02 07:12:51 ldl Exp ldl $
d165 1
a165 1
/* End of $Source: /home/ldl/dbl/RCS/node.h,v $ */
@


1.7
log
@01-Dec-94 Checkpoint
@
text
@d3 1
a3 1
 * $Header: /home/ldl/dbl/RCS/node.h,v 1.6 1994/12/01 07:06:01 ldl Exp ldl $
d26 1
a26 1
 *
@


1.6
log
@30-Nov-94 Checkpoint
@
text
@d3 1
a3 1
 * $Header: /home/ldl/dbl/RCS/node.h,v 1.5 1994/11/28 05:26:51 ldl Exp ldl $
d9 1
d96 8
@


1.5
log
@27-Nov-94 Checkpoint
@
text
@d3 1
a3 1
 * $Header: /home/ldl/dbl/RCS/node.h,v 1.4 1994/11/26 08:23:57 ldl Exp ldl $
@


1.4
log
@25-Nov-94 Checkpoint (Early A.M. on the 26th)
@
text
@d3 1
a3 1
 * $Header: /home/ldl/dbl/RCS/node.h,v 1.3 1994/11/22 14:26:56 ldl Exp ldl $
d58 1
a58 1
 *	char *
d96 4
a99 2
typedef short     Node_id;
#define MAX_NODE_ID	((1 << (8 * sizeof(Node_id))) - 1)
d103 1
d126 1
d140 1
a140 1
void      node_usage	PROTOARGS((Node_id, Node_id));
d145 1
a145 1
char     *rn		PROTOARGS((Node_id, int));
@


1.3
log
@22-Nov-94 Checkpoint
@
text
@d3 1
a3 1
 * $Header: /home/ldl/dbl/RCS/node.h,v 1.2 1994/11/19 06:22:09 ldl Exp ldl $
@


1.2
log
@*** empty log message ***
@
text
@d3 1
a3 1
 * $Header: /home/ldl/dbl/RCS/node.h,v 1.1 1994/11/16 13:07:11 ldl Exp ldl $
d6 6
a11 1
/**
d16 22
a37 1
 *	Node *
d42 2
a43 2
 *	  Node     *n;			// Node to set type/value into
 *	  TokType   type;		// Token/Node type
d48 2
a49 2
 *	  Node     *n;			// Node to get type/value from
 *	  TokType  *type;		// Addr to receive Token/Node type
d54 3
a56 3
 *	  Node     *n;			// Node to add relation to
 *	  char     *rel;		// Relationship of m to n
 *	  Node     *m;			// Node being related to
d60 2
a61 2
 *	  Node     *n;			// Node to find relationship in
 *	  char     *rel;		// Relationship "seed"
d63 1
a63 1
 *	Node *
d65 3
a67 3
 *	  Node     *n;			// Node to find relationship in
 *	  char     *rel;		// Relationship (must exist)
 *	  Node     *m;			// Node "seed"
d71 3
a73 3
 *	  Node     *n;			// Node to add relation to
 *	  char     *rel;		// Relationship of m to n
 *	  Node     *m;			// Node being related to
d75 1
a75 1
 * Notes:
d92 2
d96 6
a101 2
typedef struct _node_ *Node;
struct _node_				/* Struct: Node			*/
d103 1
a103 1
    int       n_type;			/* Type of node			*/
d108 5
a112 3
	    Node     *_n_parent;	/* Parent of relationship list	*/
	    Node     *_n_prev;		/* Previous node in list	*/
	    Node     *_n_next;		/* Next node in list		*/
d117 2
a118 1
	    Node     *_n_relation;	/* Relationships to node	*/
d121 2
a122 1
  };
d127 2
a128 1
#define n_relation	_n_variant._n_data._n_relation
d134 16
a149 7
Node     *nn	PROTOARGS((void));
void      ns	PROTOARGS((Node *, char *, char *));
void      ng	PROTOARGS((Node *, TokType *, char **));
void      rs	PROTOARGS((Node *, char *, Node *));
char     *rn	PROTOARGS((Node *, char *));
Node     *rnn	PROTOARGS((Node *, char *, Node *));
void      rk	PROTOARGS((Node *, char *, Node *));
@


1.1
log
@Initial revision
@
text
@d2 2
a3 2
 * $Locker$ $Source$
 * $Header$
d106 1
a106 1
/* End of $Source$ */
@
