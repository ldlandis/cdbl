head	1.74;
access;
symbols;
locks; strict;
comment	@ * @;


1.74
date	96.04.08.00.05.53;	author ldl;	state Exp;
branches;
next	1.73;

1.73
date	96.03.08.12.53.47;	author ldl;	state Exp;
branches;
next	1.72;

1.72
date	96.01.31.12.05.50;	author ldl;	state Exp;
branches;
next	1.71;

1.71
date	96.01.17.09.44.20;	author ldl;	state Exp;
branches;
next	1.70;

1.70
date	95.11.20.18.52.58;	author ldl;	state Exp;
branches;
next	1.69;

1.69
date	95.11.11.11.15.08;	author ldl;	state Exp;
branches;
next	1.68;

1.68
date	95.11.03.09.20.03;	author ldl;	state Exp;
branches;
next	1.67;

1.67
date	95.10.24.08.27.34;	author ldl;	state Exp;
branches;
next	1.66;

1.66
date	95.10.23.09.19.32;	author ldl;	state Exp;
branches;
next	1.65;

1.65
date	95.10.19.02.07.22;	author ldl;	state Exp;
branches;
next	1.64;

1.64
date	95.09.28.09.40.03;	author ldl;	state Exp;
branches;
next	1.63;

1.63
date	95.09.19.10.41.27;	author ldl;	state Exp;
branches;
next	1.62;

1.62
date	95.09.11.10.27.10;	author ldl;	state Exp;
branches;
next	1.61;

1.61
date	95.09.08.10.46.59;	author ldl;	state Exp;
branches;
next	1.60;

1.60
date	95.09.06.10.45.56;	author ldl;	state Exp;
branches;
next	1.59;

1.59
date	95.09.05.11.43.58;	author ldl;	state Exp;
branches;
next	1.58;

1.58
date	95.09.04.12.12.41;	author ldl;	state Exp;
branches;
next	1.57;

1.57
date	95.08.02.12.38.57;	author ldl;	state Exp;
branches;
next	1.56;

1.56
date	95.08.01.11.52.03;	author ldl;	state Exp;
branches;
next	1.55;

1.55
date	95.07.21.12.24.46;	author ldl;	state Exp;
branches;
next	1.54;

1.54
date	95.07.18.12.39.24;	author ldl;	state Exp;
branches;
next	1.53;

1.53
date	95.07.17.12.40.48;	author ldl;	state Exp;
branches;
next	1.52;

1.52
date	95.07.12.14.07.15;	author ldl;	state Exp;
branches;
next	1.51;

1.51
date	95.07.05.12.50.46;	author ldl;	state Exp;
branches;
next	1.50;

1.50
date	95.07.03.12.17.37;	author ldl;	state Exp;
branches;
next	1.49;

1.49
date	95.06.30.11.14.43;	author ldl;	state Exp;
branches;
next	1.48;

1.48
date	95.06.29.09.14.20;	author ldl;	state Exp;
branches;
next	1.47;

1.47
date	95.06.28.09.53.02;	author ldl;	state Exp;
branches;
next	1.46;

1.46
date	95.06.23.11.19.20;	author ldl;	state Exp;
branches;
next	1.45;

1.45
date	95.06.21.12.40.40;	author ldl;	state Exp;
branches;
next	1.44;

1.44
date	95.06.20.12.17.30;	author ldl;	state Exp;
branches;
next	1.43;

1.43
date	95.06.15.09.12.43;	author ldl;	state Exp;
branches;
next	1.42;

1.42
date	95.06.14.08.57.33;	author ldl;	state Exp;
branches;
next	1.41;

1.41
date	95.06.12.11.37.01;	author ldl;	state Exp;
branches;
next	1.40;

1.40
date	95.06.12.09.15.27;	author ldl;	state Exp;
branches;
next	1.39;

1.39
date	95.06.09.11.19.41;	author ldl;	state Exp;
branches;
next	1.38;

1.38
date	95.06.06.11.47.18;	author ldl;	state Exp;
branches;
next	1.37;

1.37
date	95.05.15.10.22.09;	author ldl;	state Exp;
branches;
next	1.36;

1.36
date	95.05.02.10.43.18;	author ldl;	state Exp;
branches;
next	1.35;

1.35
date	95.04.25.11.48.27;	author ldl;	state Exp;
branches;
next	1.34;

1.34
date	95.04.24.12.23.13;	author ldl;	state Exp;
branches;
next	1.33;

1.33
date	95.04.23.12.55.12;	author ldl;	state Exp;
branches;
next	1.32;

1.32
date	95.04.22.12.42.50;	author ldl;	state Exp;
branches;
next	1.31;

1.31
date	95.04.19.11.29.07;	author ldl;	state Exp;
branches;
next	1.30;

1.30
date	95.04.18.12.00.34;	author ldl;	state Exp;
branches;
next	1.29;

1.29
date	95.04.13.10.23.54;	author ldl;	state Exp;
branches;
next	1.28;

1.28
date	95.04.03.11.47.10;	author ldl;	state Exp;
branches;
next	1.27;

1.27
date	95.03.27.03.06.25;	author ldl;	state Exp;
branches;
next	1.26;

1.26
date	95.03.26.19.58.12;	author ldl;	state Exp;
branches;
next	1.25;

1.25
date	95.03.23.13.31.32;	author ldl;	state Exp;
branches;
next	1.24;

1.24
date	95.03.19.23.29.17;	author ldl;	state Exp;
branches;
next	1.23;

1.23
date	95.03.08.13.33.26;	author ldl;	state Exp;
branches;
next	1.22;

1.22
date	95.03.06.12.00.16;	author ldl;	state Exp;
branches;
next	1.21;

1.21
date	95.03.06.10.31.52;	author ldl;	state Exp;
branches;
next	1.20;

1.20
date	95.03.05.03.24.36;	author ldl;	state Exp;
branches;
next	1.19;

1.19
date	95.03.03.12.36.18;	author ldl;	state Exp;
branches;
next	1.18;

1.18
date	95.02.27.12.55.27;	author ldl;	state Exp;
branches;
next	1.17;

1.17
date	95.02.26.10.54.27;	author ldl;	state Exp;
branches;
next	1.16;

1.16
date	95.01.07.15.34.52;	author ldl;	state Exp;
branches;
next	1.15;

1.15
date	95.01.07.11.22.34;	author ldl;	state Exp;
branches;
next	1.14;

1.14
date	94.12.31.02.31.30;	author ldl;	state Exp;
branches;
next	1.13;

1.13
date	94.12.30.21.01.48;	author ldl;	state Exp;
branches;
next	1.12;

1.12
date	94.12.27.04.07.24;	author ldl;	state Exp;
branches;
next	1.11;

1.11
date	94.12.26.23.52.58;	author ldl;	state Exp;
branches;
next	1.10;

1.10
date	94.12.16.07.22.18;	author ldl;	state Exp;
branches;
next	1.9;

1.9
date	94.12.15.23.42.28;	author ldl;	state Exp;
branches;
next	1.8;

1.8
date	94.12.04.07.22.24;	author ldl;	state Exp;
branches;
next	1.7;

1.7
date	94.12.02.07.12.51;	author ldl;	state Exp;
branches;
next	1.6;

1.6
date	94.12.01.07.06.01;	author ldl;	state Exp;
branches;
next	;


desc
@@


1.74
log
@1996-Apr-07 Checkpoint
@
text
@/***
 * $Source: /home/ldl/dbl/cdbl/RCS/cdbl.c,v $
 * $Revision: 1.73 $ $Date: 1996/03/08 12:53:47 $
 */

/***
 *	Main for the DIBOL compiler.
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <varargs.h>
#include "cdbl.h"
#include "gram.h"
#include "_tokens.h"
#include "parse.h"

/**
 *	Local functions
 */
static
void      ini_close	PROTOARGS((void));
static
FILE     *ini_find	PROTOARGS((char *));
static
FILE     *ini_open	PROTOARGS((void));
static
void      ini_read_func	PROTOARGS((char *, IntrinsicFunc **));
static
void      init		PROTOARGS((int, char **, char **));
static
void      run_and_show	PROTOARGS((int (*)(), char *, int));

/**
 *	Local globals
 */
static
int       pflags = 0;			/* Print parse info flags	*/
static
int       rflags = 0;			/* Print resolver info flags	*/
static
int       gflags = 0;			/* Print generate info flags	*/
static
int       tflags = 0;			/* Print tables 		*/


/**
 *	Global globals
 */
int       inhibit_c_dump_nodes = 0,	/* Stop recursive errors	*/
	  divide_by_zero_on_assertion_failure=0;/* Force error for gdb	*/

char     *version = "$Source: /home/ldl/dbl/cdbl/RCS/cdbl.c,v $ $Revision: 1.73 $ $Date: 1996/03/08 12:53:47 $";

main(argc, argv, arge)					/* Program	*/
  int       argc;
  char    **argv;
  char    **arge;
{
  Node_id   n, top, mnet, nnet;
  
  init(argc, argv, arge);		/* Process parameters		*/

  setbuf(stdout, NULL);


  ini_read_func("BUILT-INS", &builtins);
  ini_read_func("XCALLS",    &xcalls);

  ini_close();				/* All done with .ini file	*/

  init_divisions();			/* Need this first		*/
  run_and_show(yyparse,  "parser", pflags);	/* Parse input file(s)	*/
  printf("parse of source %s\n", _parse.errors ? "FAILED!" : "successful");
  if (_parse.syntax_only)
    exit( 0 );
  if (_parse.errors)
    exit( 1 );				/* Fail on errors reported	*/
  _parse.div = DIV_EOF;			/* Have seen end of file	*/

  run_and_show(resolve,  "resolver", rflags);	/* Resolve symbol table	*/
  if (_parse.errors)
    exit( 1 );				/* Fail on errors reported	*/

  run_and_show(generate, "generator", gflags);	/* Generate "C" code	*/
  if (_parse.errors)
    exit( 1 );				/* Fail on errors reported	*/

  exit( 0 );				/* Successfully completed	*/
} /* main */

void
c_dump_nodes(tree)					/* Function	*/
  Node_id   tree;
{
  int       mnet, nnet;

  if (inhibit_c_dump_nodes)
    return;
  node_usage(&mnet, &nnet);
  if (tree)
    printf("Starting node is %d\n", tree);
  printf("Nodes %d thru %d/%d\n", 1, nnet, mnet);
  node_print(stdout, 1, nnet);
} /* c_dump_nodes */

void
c_error(va_alist)					/* Function	*/
  va_dcl
{
  char     *fmt;
  va_list   args;

  va_start(args);
  fmt = va_arg(args, char *);
  ++_parse.errors;
  printf("ERROR #%d: ", _parse.errors);
  if (_parse.div != DIV_EOF)		/* Report file:line if not EOF	*/
    {
      printf("%s:%d", _parse.file, _parse.line);
      if (_parse.cd_line > 0)
        printf(" (.LINE %d)", _parse.cd_line);
      printf(" - ");
    }
  else
    printf("%s: ", _parse.file);	/* Is file:line form		*/
  vprintf(fmt, args);
  printf("\n");
} /* c_error */

void
c_trace_nodes(tree)					/* Function	*/
  int       tree;
{
  printf("------------------------------------------------------\n");
  if (tree)
    {
      printf("Tracing nodes starting at %d\n", tree);
      node_trace(stdout, tree, -1);
    }
  else
    printf("NO tree to dump!\n");
  printf("------------------------------------------------------\n");
} /* c_trace_nodes */

void
c_warning(va_alist)					/* Function	*/
  va_dcl
{
  char     *fmt;
  va_list   args;

  va_start(args);
  fmt = va_arg(args, char *);
  ++_parse.warnings;
  printf("WARNING #%d: ", _parse.warnings);
  if (_parse.div != DIV_EOF)		/* Report file:line if not EOF	*/
    {
      printf("%s:%d", _parse.file, _parse.line);
      if (_parse.cd_line > 0)
        printf(" (.LINE %d)", _parse.cd_line);
      printf(" - ");
    }
  else
    printf("%s: ", _parse.file);	/* Is file:line form		*/
  vprintf(fmt, args);
  printf("\n");
} /* c_warning */

void
yyerror(s)						/* Function	*/
  char     *s;
{
  c_error(s);				/* Parser picked up error	*/
  if (_parse.yydebug)
    c_dump_nodes(0);
  inhibit_c_dump_nodes = 1;		/* Dumped, so don't do again	*/
} /* yyerror */

/* --------------------------------------------------------------------	*/

static
void
ini_close()						/* Function	*/
{
  FILE     *f;
  if (f = ini_open())
    fclose(f);
} /* ini_close */

/**
 *	Find the named 'stanza', return 0 if not found, else 1.
 */
static
FILE *
ini_find(stanza)					/* Function	*/
  char     *stanza;
{
  FILE     *f;
  char      match[BUFSIZ], buf[BUFSIZ];

  if ((f = ini_open()) == (FILE *)NULL)
    goto BailOut;

  rewind(f);				/* Start at top of file		*/
  sprintf(match, "[%s]", stanza);

  while (fgets(buf, sizeof(buf), f))
    {
      char     *bp;

      if (buf[0] != match[0])		/* Skip non-stanza introducers	*/
        continue;
      					/* Trim trailing white space	*/
      for (bp = buf + strlen(buf) - 1;  *bp && (bp > buf);  --bp)
        if (strchr(" \t\n", *bp) == 0)
	  break;
      bp[1] = '\0';

      if (strcmp(buf, match) == 0)
        return f;			/* Got it			*/
    }
BailOut:
  return (FILE *)NULL;			/* Not found			*/
} /* ini_find */

/**
 *	Open the cdbl.ini file.
 */
static
FILE *
ini_open()						/* Function	*/
{
  static
  FILE     *f = (FILE *)NULL;
  static
  int       hasopened = 0;
  char      ini_file[BUFSIZ];

  if (hasopened)			/* Use cached value		*/
    goto Done;

  hasopened = 1;			/* Indicated we've tried once	*/

  sprintf(ini_file, CDBL_INI);
  if ((f = fopen(ini_file, "r")) == (FILE *)NULL)
    {
      char     *env = getenv("CDBL_RUNTIME");
      if (env)
        {
          sprintf(ini_file, "%s/%s", env, CDBL_INI);
	  f = fopen(ini_file, "r");
	}
    }
  if (f == (FILE *)NULL)		/* Couldn't open the .ini file	*/
    perror(ini_file);
Done:
  return f;
} /* ini_open */

/**
 */
static
void
ini_read_func(stanza, ptable)				/* Function	*/
  char     *stanza;
  IntrinsicFunc **ptable;
{
  FILE     *f;
  char      buf[BUFSIZ], name[50], type[50], narg[50], arg[100], *bp;
  int       n, i, ln;
  IntrinsicFunc *t;
  
  n = 0;
  t = (IntrinsicFunc *)u_calloc(n + 1, sizeof(IntrinsicFunc));
  if (f = ini_find(stanza))		/* Find the stanza		*/
    {
      ln = 0;
      while (fgets(buf, sizeof(buf), f))
	{				/* Read and process entries	*/
	  ++ln;
	  if (strchr("#:!", buf[0]))
	    continue;			/* Skip comment/inactive lines	*/
	  if (strcmp(buf, "\n") == 0)
	    break;			/* Stanza ends with blank line	*/
	  buf[strlen(buf) - 1] = '\0';

          if ((i = sscanf(buf, "%s %s %s %s", name, type, narg, arg)) < 3)
	    {
	      printf("%s stanza, line %d: malformed '%s'\n", stanza, ln, buf);
	      continue;
	    }
	  if (i == 3)
	    arg[0] = '\0';

	  s_toupper(name);		/* Force all to upper case	*/
	  s_toupper(type);
	  s_toupper(narg);
	  s_toupper(arg);

	  t[n].if_name = u_strdup(name);
	  t[n].if_type = type[0];
	  t[n].if_bindtime = IF_BINDLATER;
	  if ((bp = strchr(type, ':')) && (bp[1] == 'C'))
	    t[n].if_bindtime = IF_BINDNOW;
	  t[n].if_narg = u_strdup(narg);
	  t[n].if_arg  = u_strdup(arg);
	  t = (IntrinsicFunc *)u_realloc(t, sizeof(IntrinsicFunc) * (++n + 1));
	}
    }
  t[n].if_name = NULL;
  *ptable = t;
} /* ini_read_func */

static
void
init(argc, argv, arge)					/* Function	*/
  int       argc;
  char     *argv[];
  char     *arge[];
{
  int       i, fnseen = 0;
  char     *cp;

  _parse.argc = argc;			/* Squirrel away values		*/
  _parse.argv = argv;
  _parse.arge = arge;

  if (cp = getenv("YYDEBUG"))
    _parse.yydebug = atoi(cp);

  for (i = 1;  i < argc;  ++i)
    {
      if      (strncmp(argv[i], "-v", 2) == 0)
        fprintf(stderr, "%s\n", version), exit( 0 );
      else if (strncmp(argv[i], "-d", 2) == 0)
        _parse.yydebug = atoi(argv[i]+2);
      else if (strncmp(argv[i], "--z", 3) == 0)
        {
	  cp = argv[i] + 3;
	  if      (strcmp(cp, "DivideByZeroOnAssertionFailure") == 0)
	    divide_by_zero_on_assertion_failure = 1;
	  else if (strcmp(cp, "InhibitDumpNodes") == 0)
/**/{printf("inhibit dump\n");
            inhibit_c_dump_nodes = 1;
/**/}
	  else
	    fprintf(stderr, "unknown --z flag '%s' - ignored\n", cp);
	}
      else if (strncmp(argv[i], "-g", 2) == 0)
        gflags = atoi(argv[i]+2), gflags = gflags ? gflags : 1;
      else if (strcmp (argv[i], "-o")    == 0)
        {
	  if (++i < argc)		/* Still have an arg		*/
	    _parse.out = argv[i];	/* Save output file name	*/
	  else
	    fprintf(stderr, "%s: missing output file name - ignored\n",
	            argv[0]);
	}
      else if (strncmp(argv[i], "-p", 2) == 0)
        pflags = atoi(argv[i]+2), pflags = pflags ? pflags : 1;
      else if (strncmp(argv[i], "-r", 2) == 0)
        rflags = atoi(argv[i]+2), rflags = rflags ? rflags : 1;
      else if (strncmp(argv[i], "-s", 2) == 0)
        _parse.syntax_only = atoi(argv[i]+2);
      else if (strncmp(argv[i], "-t", 2) == 0)
        tflags = atoi(argv[i]+2), tflags = tflags ? tflags : 1;
      else if (strncmp(argv[i], "-",  1) == 0)
        fprintf(stderr, "%s: unknown option '%s' - ignored\n",
	        argv[0], argv[i] );
      else
        {
	  if ( fnseen++ )		/* We've already seen a filename*/
	    fprintf(stderr, "%s: %s, '%s' - ignored\n", argv[0],
	            "can't specify another source file", argv[i]);
	  else
	    if (freopen(argv[i], "r", stdin) == (FILE *)NULL)
	      {
	        fprintf(stderr, "%s, %s '%s'\nError: ",
		        argv[0], "cannot open", argv[i]);
	        perror(argv[i]);
		exit( 1 );
	      }
	    else
	      {
		_parse.file = argv[i];	/* See cancer note in lex.l	*/
	        printf("%s: compiling '%s'\n", argv[0], argv[i]);
	      }
	}
    }
} /* init */
static
void
run_and_show(proc, desc, flags)				/* Function	*/
  int     (*proc)();
  char     *desc;
  int       flags;
{
  _parse.flags = _parse.debug_setting;	/* Use setting from .DEBUG	*/
  if (flags)				/*   unless cmd line override	*/
    _parse.flags = flags;		/* Set flags for phase		*/

  if (_parse.yydebug)
    printf("running %s\n", desc);
  (*proc)();				/* Invoke function		*/
  if (flags || tflags)
    {
      printf("======================================================\n");
      printf("%s output:\n", desc);
      if (_parse.yydebug)
        c_dump_nodes(_parse.tree);
      c_trace_nodes(_parse.tree);
      printf("======================================================\n");
    }
} /* run_and_show */

/* End of $Source: /home/ldl/dbl/cdbl/RCS/cdbl.c,v $ */
@


1.73
log
@1996-Mar-08 Checkpoint
@
text
@d3 1
a3 1
 * $Revision: 1.72 $ $Date: 1996/01/31 12:05:50 $
d14 1
d23 8
d54 1
a54 1
char     *version = "$Source: /home/ldl/dbl/cdbl/RCS/cdbl.c,v $ $Revision: 1.72 $ $Date: 1996/01/31 12:05:50 $";
d67 6
d183 132
a392 1

@


1.72
log
@1996-Jan-31 Checkpoint
@
text
@d3 1
a3 1
 * $Revision: 1.71 $ $Date: 1996/01/17 09:44:20 $
d45 1
a45 1
char     *version = "$Source: /home/ldl/dbl/cdbl/RCS/cdbl.c,v $ $Revision: 1.71 $ $Date: 1996/01/17 09:44:20 $";
@


1.71
log
@1996-Jan-17 Checkpoint
@
text
@d3 1
a3 1
 * $Revision: 1.70 $ $Date: 1995/11/20 18:52:58 $
d45 1
a45 1
char     *version = "$Source: /home/ldl/dbl/cdbl/RCS/cdbl.c,v $ $Revision: 1.70 $ $Date: 1995/11/20 18:52:58 $";
@


1.70
log
@1995-Nov-20 Checkpoint
@
text
@d3 1
a3 1
 * $Revision: 1.69 $ $Date: 1995/11/11 11:15:08 $
d45 1
a45 1
char     *version = "$Source: /home/ldl/dbl/cdbl/RCS/cdbl.c,v $ $Revision: 1.69 $ $Date: 1995/11/11 11:15:08 $";
@


1.69
log
@1995-Nov-11 Checkpoint
@
text
@d3 1
a3 1
 * $Revision: 1.68 $ $Date: 1995/11/03 09:20:03 $
d45 1
a45 1
char     *version = "$Source: /home/ldl/dbl/cdbl/RCS/cdbl.c,v $ $Revision: 1.68 $ $Date: 1995/11/03 09:20:03 $";
@


1.68
log
@1995-Nov-03 Checkpoint
@
text
@d3 1
a3 1
 * $Revision: 1.67 $ $Date: 1995/10/24 08:27:34 $
d45 1
a45 1
char     *version = "$Source: /home/ldl/dbl/cdbl/RCS/cdbl.c,v $ $Revision: 1.67 $ $Date: 1995/10/24 08:27:34 $";
@


1.67
log
@1995-Oct-24 Checkpoint
@
text
@d3 1
a3 1
 * $Revision: 1.66 $ $Date: 1995/10/23 09:19:32 $
d45 1
a45 1
char     *version = "$Source: /home/ldl/dbl/cdbl/RCS/cdbl.c,v $ $Revision: 1.66 $ $Date: 1995/10/23 09:19:32 $";
@


1.66
log
@1995-Oct-23 Checkpoint
@
text
@d3 1
a3 1
 * $Revision: 1.65 $ $Date: 1995/10/19 02:07:22 $
d45 1
a45 1
char     *version = "$Source: /home/ldl/dbl/cdbl/RCS/cdbl.c,v $ $Revision: 1.65 $ $Date: 1995/10/19 02:07:22 $";
@


1.65
log
@1995-Oct-18 Checkpoint
@
text
@d3 1
a3 1
 * $Revision: 1.64 $ $Date: 1995/09/28 09:40:03 $
d45 1
a45 1
char     *version = "$Source: /home/ldl/dbl/cdbl/RCS/cdbl.c,v $ $Revision: 1.64 $ $Date: 1995/09/28 09:40:03 $";
@


1.64
log
@1995-Sep-28 Checkpoint
@
text
@d3 1
a3 1
 * $Revision: 1.63 $ $Date: 1995/09/19 10:41:27 $
d45 1
a45 1
char     *version = "$Source: /home/ldl/dbl/cdbl/RCS/cdbl.c,v $ $Revision: 1.63 $ $Date: 1995/09/19 10:41:27 $";
@


1.63
log
@1995-Sep-19 Checkpoint
@
text
@d3 1
a3 1
 * $Revision: 1.62 $ $Date: 1995/09/11 10:27:10 $
d42 2
a43 1
int       inhibit_c_dump_nodes = 0;	/* Stop recursive errors	*/
d45 1
a45 1
char     *version = "$Source: /home/ldl/dbl/cdbl/RCS/cdbl.c,v $ $Revision: 1.62 $ $Date: 1995/09/11 10:27:10 $";
d195 3
a197 1
	  if      (strcmp(cp, "InhibitDumpNodes") == 0)
@


1.62
log
@1995-Sep-11 Checkpoint
@
text
@d3 1
a3 1
 * $Revision: 1.61 $ $Date: 1995/09/08 10:46:59 $
d44 1
a44 1
char     *version = "$Source: /home/ldl/dbl/cdbl/RCS/cdbl.c,v $ $Revision: 1.61 $ $Date: 1995/09/08 10:46:59 $";
@


1.61
log
@1995-Sep-08 Checkpoint
@
text
@d3 1
a3 1
 * $Revision: 1.60 $ $Date: 1995/09/06 10:45:56 $
d44 1
a44 1
char     *version = "$Source: /home/ldl/dbl/cdbl/RCS/cdbl.c,v $ $Revision: 1.60 $ $Date: 1995/09/06 10:45:56 $";
@


1.60
log
@1995-Sep-06 Checkpoint
@
text
@d3 1
a3 1
 * $Revision: 1.59 $ $Date: 1995/09/05 11:43:58 $
d44 1
a44 1
char     *version = "$Source: /home/ldl/dbl/cdbl/RCS/cdbl.c,v $ $Revision: 1.59 $ $Date: 1995/09/05 11:43:58 $";
@


1.59
log
@1995-Sep-05 Checkpoint
@
text
@d3 1
a3 1
 * $Revision: 1.58 $ $Date: 1995/09/04 12:12:41 $
d44 1
a44 1
char     *version = "$Source: /home/ldl/dbl/cdbl/RCS/cdbl.c,v $ $Revision: 1.58 $ $Date: 1995/09/04 12:12:41 $";
@


1.58
log
@1995-Sep-04 Checkpoint
@
text
@d3 1
a3 1
 * $Revision: 1.57 $ $Date: 1995/08/02 12:38:57 $
a29 2
int       inhibit_c_dump_nodes = 0;	/* Stop recursive errors	*/
static
d42 1
d44 1
a44 1
char     *version = "$Source: /home/ldl/dbl/cdbl/RCS/cdbl.c,v $ $Revision: 1.57 $ $Date: 1995/08/02 12:38:57 $";
d110 2
d149 2
d191 10
@


1.57
log
@1995-Aug-02 Checkpoint
@
text
@d3 1
a3 1
 * $Revision: 1.56 $ $Date: 1995/08/01 11:52:03 $
d45 1
a45 1
char     *version = "$Source: /home/ldl/dbl/cdbl/RCS/cdbl.c,v $ $Revision: 1.56 $ $Date: 1995/08/01 11:52:03 $";
d105 6
a110 1
    printf("%s:%d - ", _parse.file, _parse.line);
d142 6
a147 1
    printf("%s:%d - ", _parse.file, _parse.line);
@


1.56
log
@1995-Aug-01 Checkpoint
@
text
@d3 1
a3 1
 * $Revision: 1.55 $ $Date: 1995/07/21 12:24:46 $
d45 1
a45 1
char     *version = "$Source: /home/ldl/dbl/cdbl/RCS/cdbl.c,v $ $Revision: 1.55 $ $Date: 1995/07/21 12:24:46 $";
@


1.55
log
@1995-Jul-21 Checkpoint
@
text
@d3 1
a3 1
 * $Revision: 1.54 $ $Date: 1995/07/18 12:39:24 $
d45 1
a45 1
char     *version = "$Source: /home/ldl/dbl/cdbl/RCS/cdbl.c,v $ $Revision: 1.54 $ $Date: 1995/07/18 12:39:24 $";
d228 4
a231 1
  _parse.flags = flags;			/* Set flags for phase		*/
@


1.54
log
@1995-Jul-18 Checkpoint
@
text
@d3 1
a3 1
 * $Revision: 1.53 $ $Date: 1995/07/17 12:40:48 $
d45 1
a45 1
char     *version = "$Source: /home/ldl/dbl/cdbl/RCS/cdbl.c,v $ $Revision: 1.53 $ $Date: 1995/07/17 12:40:48 $";
d57 2
@


1.53
log
@1995-Jul-17 Checkpoint
@
text
@d3 1
a3 1
 * $Revision: 1.52 $ $Date: 1995/07/12 14:07:15 $
d45 1
a45 1
char     *version = "$Source: /home/ldl/dbl/cdbl/RCS/cdbl.c,v $ $Revision: 1.52 $ $Date: 1995/07/12 14:07:15 $";
@


1.52
log
@1995-Jul-12 Checkpoint
@
text
@d3 1
a3 1
 * $Revision: 1.51 $ $Date: 1995/07/05 12:50:46 $
d45 1
a45 1
char     *version = "$Source: /home/ldl/dbl/cdbl/RCS/cdbl.c,v $ $Revision: 1.51 $ $Date: 1995/07/05 12:50:46 $";
@


1.51
log
@1995-Jul-05 Checkpoint
@
text
@d3 1
a3 1
 * $Revision: 1.50 $ $Date: 1995/07/03 12:17:37 $
d45 1
a45 1
char     *version = "$Source: /home/ldl/dbl/cdbl/RCS/cdbl.c,v $ $Revision: 1.50 $ $Date: 1995/07/03 12:17:37 $";
@


1.50
log
@1995-Jul-03 Checkpoint
@
text
@d3 1
a3 1
 * $Revision: 1.49 $ $Date: 1995/06/30 11:14:43 $
d45 1
a45 1
char     *version = "$Source: /home/ldl/dbl/cdbl/RCS/cdbl.c,v $ $Revision: 1.49 $ $Date: 1995/06/30 11:14:43 $";
@


1.49
log
@1995-Jun-30 Checkpoint
@
text
@d3 1
a3 1
 * $Revision: 1.48 $ $Date: 1995/06/29 09:14:20 $
d45 1
a45 1
char     *version = "$Source: /home/ldl/dbl/cdbl/RCS/cdbl.c,v $ $Revision: 1.48 $ $Date: 1995/06/29 09:14:20 $";
@


1.48
log
@1995-Jun-29 Checkpoint
@
text
@d3 1
a3 1
 * $Revision: 1.47 $ $Date: 1995/06/28 09:53:02 $
d45 1
a45 1
char     *version = "$Source: /home/ldl/dbl/cdbl/RCS/cdbl.c,v $ $Revision: 1.47 $ $Date: 1995/06/28 09:53:02 $";
@


1.47
log
@1995-Jun-28 Checkpoint. Happy 17th birthday, Kara\!
@
text
@d3 1
a3 1
 * $Revision: 1.46 $ $Date: 1995/06/23 11:19:20 $
d45 1
a45 1
char     *version = "$Source: /home/ldl/dbl/cdbl/RCS/cdbl.c,v $ $Revision: 1.46 $ $Date: 1995/06/23 11:19:20 $";
@


1.46
log
@1995-Jun-23 Checkpoint
@
text
@d3 1
a3 1
 * $Revision: 1.45 $ $Date: 1995/06/21 12:40:40 $
d45 1
a45 1
char     *version = "$Source: /home/ldl/dbl/cdbl/RCS/cdbl.c,v $ $Revision: 1.45 $ $Date: 1995/06/21 12:40:40 $";
@


1.45
log
@1995-Jun-21 Checkpoint. hello.dbl runs\!
@
text
@d3 1
a3 1
 * $Revision: 1.44 $ $Date: 1995/06/20 12:17:30 $
d45 1
a45 1
char     *version = "$Source: /home/ldl/dbl/cdbl/RCS/cdbl.c,v $ $Revision: 1.44 $ $Date: 1995/06/20 12:17:30 $";
@


1.44
log
@1995-Jun-20 Checkpoint
@
text
@d3 1
a3 1
 * $Revision: 1.43 $ $Date: 1995/06/15 09:12:43 $
d45 1
a45 1
char     *version = "$Source: /home/ldl/dbl/cdbl/RCS/cdbl.c,v $ $Revision: 1.43 $ $Date: 1995/06/15 09:12:43 $";
@


1.43
log
@1995-Jun-15 Checkpoint
@
text
@d3 1
a3 1
 * $Revision: 1.42 $ $Date: 1995/06/14 08:57:33 $
d45 1
a45 1
char     *version = "$Source: /home/ldl/dbl/cdbl/RCS/cdbl.c,v $ $Revision: 1.42 $ $Date: 1995/06/14 08:57:33 $";
@


1.42
log
@1995-Jun-14 Checkpoint
@
text
@d3 1
a3 1
 * $Revision: 1.41 $ $Date: 1995/06/12 11:37:01 $
a21 2
void      c_trace_nodes	PROTOARGS((int));
static
d45 1
a45 1
char     *version = "$Source: /home/ldl/dbl/cdbl/RCS/cdbl.c,v $ $Revision: 1.41 $ $Date: 1995/06/12 11:37:01 $";
d109 15
d138 1
a138 1
}
a151 15
static
void
c_trace_nodes(tree)					/* Function	*/
  int       tree;
{
  printf("------------------------------------------------------\n");
  if (tree)
    {
      printf("Tracing nodes starting at %d\n", tree);
      node_trace(stdout, tree, -1);
    }
  else
    printf("NO tree to dump!\n");
  printf("------------------------------------------------------\n");
} /* c_trace_nodes */
@


1.41
log
@1995-Jun-12 Checkpoint 2
@
text
@d3 1
a3 1
 * $Revision: 1.40 $ $Date: 1995/06/12 09:15:27 $
d47 1
a47 1
char     *version = "$Source: /home/ldl/dbl/cdbl/RCS/cdbl.c,v $ $Revision: 1.40 $ $Date: 1995/06/12 09:15:27 $";
@


1.40
log
@1995-Jun-12 Checkpoint
@
text
@d3 1
a3 1
 * $Revision: 1.39 $ $Date: 1995/06/09 11:19:41 $
d47 1
a47 1
char     *version = "$Source: /home/ldl/dbl/cdbl/RCS/cdbl.c,v $ $Revision: 1.39 $ $Date: 1995/06/09 11:19:41 $";
@


1.39
log
@1995-Jun-09 Checkpoint
@
text
@d3 1
a3 1
 * $Revision: 1.38 $ $Date: 1995/06/06 11:47:18 $
d47 1
a47 1
char     *version = "$Source: /home/ldl/dbl/cdbl/RCS/cdbl.c,v $ $Revision: 1.38 $ $Date: 1995/06/06 11:47:18 $";
@


1.38
log
@1995-Jun-06 Checkpoint
@
text
@d3 1
a3 1
 * $Revision: 1.37 $ $Date: 1995/05/15 10:22:09 $
d47 1
a47 1
char     *version = "$Source: /home/ldl/dbl/cdbl/RCS/cdbl.c,v $ $Revision: 1.37 $ $Date: 1995/05/15 10:22:09 $";
@


1.37
log
@1995-May-15 Checkpoint
@
text
@d2 2
a3 2
 * $Locker: ldl $ $Source: /home/ldl/dbl/cdbl/RCS/cdbl.c,v $
 * $Header: /home/ldl/dbl/cdbl/RCS/cdbl.c,v 1.36 1995/05/02 10:43:18 ldl Exp ldl $
d47 1
a47 1
char     *version = "$Header: /home/ldl/dbl/cdbl/RCS/cdbl.c,v 1.36 1995/05/02 10:43:18 ldl Exp ldl $";
@


1.36
log
@1995-May-02 Checkpoint
@
text
@d3 1
a3 1
 * $Header: /home/ldl/dbl/cdbl/RCS/cdbl.c,v 1.35 1995/04/25 11:48:27 ldl Exp ldl $
d39 2
d47 1
a47 1
char     *version = "$Header: /home/ldl/dbl/cdbl/RCS/cdbl.c,v 1.35 1995/04/25 11:48:27 ldl Exp ldl $";
d194 2
d232 1
a232 1
  if (flags)
@


1.35
log
@1995-Apr-25 Checkpoint
@
text
@d3 1
a3 1
 * $Header: /home/ldl/dbl/cdbl/RCS/cdbl.c,v 1.34 1995/04/24 12:23:13 ldl Exp ldl $
d45 1
a45 1
char     *version = "$Header: /home/ldl/dbl/cdbl/RCS/cdbl.c,v 1.34 1995/04/24 12:23:13 ldl Exp ldl $";
@


1.34
log
@1995-Apr-24 Checkpoint
@
text
@d3 1
a3 1
 * $Header: /home/ldl/dbl/cdbl/RCS/cdbl.c,v 1.33 1995/04/23 12:55:12 ldl Exp ldl $
d45 1
a45 1
char     *version = "$Header: /home/ldl/dbl/cdbl/RCS/cdbl.c,v 1.33 1995/04/23 12:55:12 ldl Exp ldl $";
@


1.33
log
@1995-Apr-23 Checkpoint (a.m.)
@
text
@d3 1
a3 1
 * $Header: /home/ldl/dbl/cdbl/RCS/cdbl.c,v 1.32 1995/04/22 12:42:50 ldl Exp ldl $
d45 1
a45 1
char     *version = "$Header: /home/ldl/dbl/cdbl/RCS/cdbl.c,v 1.32 1995/04/22 12:42:50 ldl Exp ldl $";
@


1.32
log
@1995-Apr-22 Checkpoint (a.m.)
@
text
@d3 1
a3 1
 * $Header: /home/ldl/dbl/cdbl/RCS/cdbl.c,v 1.31 1995/04/19 11:29:07 ldl Exp ldl $
d45 1
a45 1
char     *version = "$Header: /home/ldl/dbl/cdbl/RCS/cdbl.c,v 1.31 1995/04/19 11:29:07 ldl Exp ldl $";
@


1.31
log
@1995-Apr-19 Checkpoint
@
text
@d3 1
a3 1
 * $Header: /home/ldl/dbl/cdbl/RCS/cdbl.c,v 1.30 1995/04/18 12:00:34 ldl Exp ldl $
d45 1
a45 1
char     *version = "$Header: /home/ldl/dbl/cdbl/RCS/cdbl.c,v 1.30 1995/04/18 12:00:34 ldl Exp ldl $";
@


1.30
log
@1995-Apr-18 Checkpoint
@
text
@d3 1
a3 1
 * $Header: /home/ldl/dbl/cdbl/RCS/cdbl.c,v 1.29 1995/04/13 10:23:54 ldl Exp ldl $
d45 1
a45 1
char     *version = "$Header: /home/ldl/dbl/cdbl/RCS/cdbl.c,v 1.29 1995/04/13 10:23:54 ldl Exp ldl $";
@


1.29
log
@1995-Apr-13 Checkpoint
@
text
@d3 1
a3 1
 * $Header: /home/ldl/dbl/cdbl/RCS/cdbl.c,v 1.28 1995/04/03 11:47:10 ldl Exp ldl $
d45 1
a45 1
char     *version = "$Header: /home/ldl/dbl/cdbl/RCS/cdbl.c,v 1.28 1995/04/03 11:47:10 ldl Exp ldl $";
@


1.28
log
@1995-Apr-03 Checkpoint.
@
text
@d3 1
a3 1
 * $Header: /home/ldl/dbl/cdbl/RCS/cdbl.c,v 1.27 1995/03/27 03:06:25 ldl Exp ldl $
d45 1
a45 1
char     *version = "$Header: /home/ldl/dbl/cdbl/RCS/cdbl.c,v 1.27 1995/03/27 03:06:25 ldl Exp ldl $";
@


1.27
log
@26-Mar-1995 Checkpoint 2
@
text
@d3 1
a3 1
 * $Header: /home/ldl/dbl/cdbl/RCS/cdbl.c,v 1.26 1995/03/26 19:58:12 ldl Exp ldl $
d45 1
a45 1
char     *version = "$Header: /home/ldl/dbl/cdbl/RCS/cdbl.c,v 1.26 1995/03/26 19:58:12 ldl Exp ldl $";
@


1.26
log
@26-Mar-1995 Checkpoint 1
@
text
@d3 1
a3 1
 * $Header: /home/ldl/dbl/cdbl/RCS/cdbl.c,v 1.25 1995/03/23 13:31:32 ldl Exp ldl $
d45 1
a45 1
char     *version = "$Header: /home/ldl/dbl/cdbl/RCS/cdbl.c,v 1.25 1995/03/23 13:31:32 ldl Exp ldl $";
@


1.25
log
@23-Mar-1995 Checkpoint
@
text
@d3 1
a3 1
 * $Header: /home/ldl/dbl/cdbl/RCS/cdbl.c,v 1.24 1995/03/19 23:29:17 ldl Exp ldl $
d45 1
a45 1
char     *version = "$Header: /home/ldl/dbl/cdbl/RCS/cdbl.c,v 1.24 1995/03/19 23:29:17 ldl Exp ldl $";
@


1.24
log
@19-Mar-1995 Checkpoint
@
text
@d3 1
a3 1
 * $Header: /home/ldl/dbl/cdbl/RCS/cdbl.c,v 1.23 1995/03/08 13:33:26 ldl Exp ldl $
d45 1
a45 1
char     *version = "$Header: /home/ldl/dbl/cdbl/RCS/cdbl.c,v 1.23 1995/03/08 13:33:26 ldl Exp ldl $";
@


1.23
log
@08-Mar-1995 Checkpoint
@
text
@d3 1
a3 1
 * $Header: /home/ldl/dbl/cdbl/RCS/cdbl.c,v 1.22 1995/03/06 12:00:16 ldl Exp ldl $
d45 1
a45 1
char     *version = "$Header: /home/ldl/dbl/cdbl/RCS/cdbl.c,v 1.22 1995/03/06 12:00:16 ldl Exp ldl $";
@


1.22
log
@06-Mar-1995 Checkpoint 2
@
text
@d3 1
a3 1
 * $Header: /home/ldl/dbl/cdbl/RCS/cdbl.c,v 1.21 1995/03/06 10:31:52 ldl Exp ldl $
d45 1
a45 1
char     *version = "$Header: /home/ldl/dbl/cdbl/RCS/cdbl.c,v 1.21 1995/03/06 10:31:52 ldl Exp ldl $";
d78 1
d103 1
a103 1
    printf("%s:%d - ", _parse.file, _parse.line + 1);
d120 1
a120 1
    printf("%s:%d - ", _parse.file, _parse.line + 1);
@


1.21
log
@06-Mar-1995 Checkpoint
@
text
@d3 1
a3 1
 * $Header: /home/ldl/dbl/cdbl/RCS/cdbl.c,v 1.20 1995/03/05 03:24:36 ldl Exp ldl $
d45 1
a45 1
char     *version = "$Header: /home/ldl/dbl/cdbl/RCS/cdbl.c,v 1.20 1995/03/05 03:24:36 ldl Exp ldl $";
@


1.20
log
@04-Mar-1995 Checkpoint
@
text
@d3 1
a3 1
 * $Header: /home/ldl/dbl/cdbl/RCS/cdbl.c,v 1.19 1995/03/03 12:36:18 ldl Exp ldl $
d45 1
a45 1
char     *version = "$Header: /home/ldl/dbl/cdbl/RCS/cdbl.c,v 1.19 1995/03/03 12:36:18 ldl Exp ldl $";
d58 1
a58 1
  printf("Compilation %s\n", _parse.errors ? "FAILED!" : "successful");
@


1.19
log
@03-Mar-1995 Checkpoint
@
text
@d3 1
a3 1
 * $Header: /home/ldl/dbl/cdbl/RCS/cdbl.c,v 1.18 1995/02/27 12:55:27 ldl Exp ldl $
d45 1
a45 1
char     *version = "$Header: /home/ldl/dbl/cdbl/RCS/cdbl.c,v 1.18 1995/02/27 12:55:27 ldl Exp ldl $";
@


1.18
log
@27-Feb-1995 Checkpoint
@
text
@d3 1
a3 1
 * $Header: /home/ldl/dbl/cdbl/RCS/cdbl.c,v 1.17 1995/02/26 10:54:27 ldl Exp ldl $
d45 1
a45 1
char     *version = "$Header: /home/ldl/dbl/cdbl/RCS/cdbl.c,v 1.17 1995/02/26 10:54:27 ldl Exp ldl $";
@


1.17
log
@26-Feb-1995 Checkpoint
@
text
@d3 1
a3 1
 * $Header: /home/ldl/dbl/cdbl/RCS/cdbl.c,v 1.16 1995/01/07 15:34:52 ldl Exp ldl $
d24 1
a24 1
void      init		PROTOARGS((int, char **));
d26 1
a26 1
void      run_and_show	PROTOARGS((int (*)(), char *));
d32 7
a38 1
int       inhibit_c_dump_nodes = 0;
d45 1
a45 1
char     *version = "$Header: /home/ldl/dbl/cdbl/RCS/cdbl.c,v 1.16 1995/01/07 15:34:52 ldl Exp ldl $";
d47 1
a47 1
main(argc, argv)					/* Program	*/
d50 1
d54 1
a54 1
  init(argc, argv);			/* Process parameters		*/
d57 1
a57 1
  run_and_show(yyparse,  "parser");	/* Parse input file(s)		*/
d64 8
a71 2
  run_and_show(resolve,  "resolver");	/* Resolve symbol table	stuff	*/
  run_and_show(generate, "generator");	/* Generate "C" code		*/
d73 1
a73 1
  exit( 0 );
d154 1
a154 1
init(argc, argv)					/* Function	*/
d157 1
d162 4
d175 2
d185 4
d218 1
a218 1
run_and_show(proc, desc)				/* Function	*/
d221 1
d223 1
d227 9
a235 6
  printf("======================================================\n");
  printf("%s output:\n", desc);
  if (_parse.yydebug)
    c_dump_nodes(_parse.tree);
  c_trace_nodes(_parse.tree);
  printf("======================================================\n");
@


1.16
log
@07-Jan-1995 Checkpoint 2
@
text
@d3 1
a3 1
 * $Header: /home/ldl/dbl/cdbl/RCS/cdbl.c,v 1.15 1995/01/07 11:22:34 ldl Exp ldl $
d39 1
a39 1
char     *version = "$Header: /home/ldl/dbl/cdbl/RCS/cdbl.c,v 1.15 1995/01/07 11:22:34 ldl Exp ldl $";
d56 1
d81 1
d83 1
a83 1
  char     *fmt;
d87 3
a89 1
  printf("ERROR #%d: %s:%d - ", _parse.errors, _parse.file, _parse.line+1);
d98 1
d100 1
a100 1
  char     *fmt;
d104 3
a106 1
  printf("WARNING #%d: %s:%d - ", _parse.warnings, _parse.file, _parse.line+1);
d157 8
@


1.15
log
@07-Jan-1995 Checkpoint 1
@
text
@d3 1
a3 1
 * $Header: /home/ldl/dbl/cdbl/RCS/cdbl.c,v 1.14 1994/12/31 02:31:30 ldl Exp ldl $
d31 7
d39 1
a39 1
char     *version = "$Header: /home/ldl/dbl/cdbl/RCS/cdbl.c,v 1.14 1994/12/31 02:31:30 ldl Exp ldl $";
d66 3
d111 1
@


1.14
log
@30-Dec-1994 Checkpoint 2
@
text
@d3 1
a3 1
 * $Header: /home/ldl/dbl/cdbl/RCS/cdbl.c,v 1.13 1994/12/30 21:01:48 ldl Exp ldl $
d12 1
d32 1
a32 1
char     *version = "$Header: /home/ldl/dbl/cdbl/RCS/cdbl.c,v 1.13 1994/12/30 21:01:48 ldl Exp ldl $";
d45 2
d99 2
a100 1
  c_dump_nodes(0);
d111 7
a117 2
  printf("Tracing nodes starting at %d\n", tree);
  node_trace(stdout, tree, -1);
d127 1
a127 1
  int       i;
d133 31
d177 2
a178 1
  c_dump_nodes(_parse.tree);
@


1.13
log
@30-Dec-1994 Checkpoint 1
@
text
@d3 1
a3 1
 * $Header: /home/ldl/dbl/cdbl/RCS/cdbl.c,v 1.12 1994/12/27 04:07:24 ldl Exp ldl $
d31 1
a31 1
char     *version = "$Header: /home/ldl/dbl/cdbl/RCS/cdbl.c,v 1.12 1994/12/27 04:07:24 ldl Exp ldl $";
d72 1
a72 1
  printf("ERROR #%d: %s:%d - ", _parse.errors, _parse.file, _parse.line);
d85 2
a86 1
  printf("WARNING: %s:%d - ", _parse.file, _parse.line);
a88 1
  ++_parse.warnings;
@


1.12
log
@26-Dec-1994 Checkpoint 2
@
text
@d3 1
a3 1
 * $Header: /home/ldl/dbl/cdbl/RCS/cdbl.c,v 1.11 1994/12/26 23:52:58 ldl Exp ldl $
d11 1
d22 4
d31 1
a31 1
char     *version = "$Header: /home/ldl/dbl/cdbl/RCS/cdbl.c,v 1.11 1994/12/26 23:52:58 ldl Exp ldl $";
d39 2
d42 1
a42 1
  yyparse();				/* Parse input file		*/
d46 3
a48 8
  c_dump_nodes(_parse.tree);
  c_trace_nodes(_parse.tree);
  printf("Assign variables to buffer offsets\n");
#if 0
  asgn_bo();				/* Assign buffer offsets	*/
  c_dump_nodes(_parse.tree);
  c_trace_nodes(_parse.tree);
#endif /* 0 */
d111 30
@


1.11
log
@26-Dec-1994 Checkpoint 1
@
text
@d3 1
a3 1
 * $Header: /home/ldl/dbl/cdbl/RCS/cdbl.c,v 1.10 1994/12/16 07:22:18 ldl Exp ldl $
d26 1
a26 1
char     *version = "$Header: /home/ldl/dbl/cdbl/RCS/cdbl.c,v 1.10 1994/12/16 07:22:18 ldl Exp ldl $";
@


1.10
log
@15-Dec-1994 late
@
text
@d3 1
a3 1
 * $Header: /home/ldl/dbl/cdbl/RCS/cdbl.c,v 1.9 1994/12/15 23:42:28 ldl Exp ldl $
a9 1
#include <assert.h>
d26 1
a26 1
char     *version = "$Header: /home/ldl/dbl/cdbl/RCS/cdbl.c,v 1.9 1994/12/15 23:42:28 ldl Exp ldl $";
@


1.9
log
@15-Dec-1994 Checkpoint
@
text
@d3 1
a3 1
 * $Header: /home/ldl/dbl/cdbl/RCS/cdbl.c,v 1.8 1994/12/04 07:22:24 ldl Exp ldl $
d27 1
a27 1
char     *version = "$Header: /home/ldl/dbl/cdbl/RCS/cdbl.c,v 1.8 1994/12/04 07:22:24 ldl Exp ldl $";
d36 4
a39 2
  yyparse();
  printf("Compilation successful!\n");
d42 6
d70 2
a71 1
  printf("ERROR: %s:%d - ", _parse.file, _parse.line);
a73 1
  ++_parse.errors;
@


1.8
log
@03-Dec-94 Checkpoint
@
text
@d2 2
a3 2
 * $Locker: ldl $ $Source: /home/ldl/dbl/RCS/cdbl.c,v $
 * $Header: /home/ldl/dbl/RCS/cdbl.c,v 1.7 1994/12/02 07:12:51 ldl Exp ldl $
d20 2
d27 2
a32 2
  static
  char     *version = "$Header: /home/ldl/dbl/RCS/cdbl.c,v 1.7 1994/12/02 07:12:51 ldl Exp ldl $";
d37 4
a40 1
  c_dump_nodes();
d44 1
a44 1
c_dump_nodes()						/* Function	*/
d48 2
d87 1
a87 1
  c_dump_nodes();
d90 14
a103 1
/* End of $Source: /home/ldl/dbl/RCS/cdbl.c,v $ */
@


1.7
log
@01-Dec-94 Checkpoint
@
text
@d3 1
a3 1
 * $Header: /home/ldl/dbl/RCS/cdbl.c,v 1.6 1994/12/01 07:06:01 ldl Exp ldl $
d12 1
d15 1
d30 1
a30 1
  char     *version = "$Header: /home/ldl/dbl/RCS/cdbl.c,v 1.6 1994/12/01 07:06:01 ldl Exp ldl $";
d35 2
d38 44
a81 1
} /* main */
@


1.6
log
@30-Nov-94 Checkpoint
@
text
@d2 2
a3 2
 * $Locker$ $Source$
 * $Header$
d28 1
a28 1
  char     *version = "$Header$";
d36 1
a36 1
/* End of $Source$ */
@
