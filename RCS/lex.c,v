head	1.7;
access;
symbols;
locks; strict;
comment	@ * @;


1.7
date	94.12.02.07.12.51;	author ldl;	state Exp;
branches;
next	1.6;

1.6
date	94.12.01.07.06.01;	author ldl;	state Exp;
branches;
next	1.5;

1.5
date	94.11.28.05.26.51;	author ldl;	state Exp;
branches;
next	1.4;

1.4
date	94.11.26.08.23.48;	author ldl;	state Exp;
branches;
next	;


desc
@@


1.7
log
@01-Dec-94 Checkpoint
@
text
@/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: flex.skl,v 1.2 94/01/04 14:33:15 vern Exp $
 */

#define FLEX_SCANNER

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#ifdef __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */


#ifdef __TURBOC__
#define YY_USE_CONST
#endif


#ifndef YY_USE_CONST
#ifndef const
#define const
#endif
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.
 */
#define YY_START ((yy_start - 1) / 2)

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file".  Now included
 * only for backward compatibility with previous versions of flex.
 */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#ifdef __cplusplus
extern "C" {
#endif
	extern int yywrap YY_PROTO(( void ));
#ifdef __cplusplus
	}
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	/* Whether we've seen an EOF on this buffer. */
	int yy_eof_status;
#define EOF_NOT_SEEN 0
	/* "Pending" happens when the EOF has been seen but there's still
	 * some text to process.  Note that when we actually see the EOF,
	 * we switch the status back to "not seen" (via yyrestart()), so
	 * that the user can continue scanning by just pointing yyin at
	 * a new input file.
	 */
#define EOF_PENDING 1
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

static void yyunput YY_PROTO(( int c, char *buf_ptr ));
void yyrestart YY_PROTO(( FILE *input_file ));
void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));

static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
static void yy_push_state YY_PROTO(( int new_state ));
static void yy_pop_state YY_PROTO(( void ));
static int yy_top_state YY_PROTO(( void ));

#ifndef yytext_ptr
static void yy_flex_strcpy YY_PROTO(( char *, const char * ));
#endif

static void *yy_flex_alloc YY_PROTO(( unsigned int ));
static void *yy_flex_realloc YY_PROTO(( void *ptr, unsigned int ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define INITIAL 0
typedef unsigned char YY_CHAR;
typedef int yy_state_type;

#define YY_USES_REJECT
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
extern char *yytext;
#define yytext_ptr yytext

#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( const char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yytext_ptr -= yy_more_len; \
	yyleng = yy_cp - yytext_ptr; \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_END_OF_BUFFER 13
static const short int yy_acclist[38] =
    {   0,
       13,   11,   12,    9,   11,   12,    8,   12,   11,   12,
        3,   11,   12,   11,   12,   11,   12,    2,    3,   11,
       12,    4,   11,   12,    7,    5,    3,    6,    4,    4,
        6,    6,   10,    4,    1,   10,    1
    } ;

static const short int yy_accept[32] =
    {   0,
        1,    1,    1,    2,    4,    7,    9,   11,   14,   16,
       18,   22,   25,   25,   26,   26,   27,   28,   28,   28,
       29,   29,   30,   31,   32,   34,   35,   36,   37,   38,
       38
    } ;

static const int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    5,    6,    7,    8,    1,
        1,    1,    9,    1,   10,   11,    1,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,    1,   13,    1,
        1,    1,   14,    1,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
        1,    1,    1,    1,   16,    1,   15,   15,   15,   15,

       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const int yy_meta[17] =
    {   0,
        1,    1,    2,    1,    3,    1,    1,    1,    1,    1,
        1,    3,    1,    1,    3,    3
    } ;

static const short int yy_base[35] =
    {   0,
        0,    0,   48,   49,   49,   15,   43,    0,   17,   34,
        0,    7,   19,   49,   41,   49,    0,   36,   34,   49,
       31,   16,   24,   18,    0,   12,   17,    0,   19,   49,
       34,   17,   37,   40
    } ;

static const short int yy_def[35] =
    {   0,
       30,    1,   30,   30,   30,   30,   31,   32,   33,   30,
       32,   30,   30,   30,   31,   30,   32,   33,   33,   30,
       33,   30,   30,   30,   34,   30,   30,   34,   30,    0,
       30,   30,   30,   30
    } ;

static const short int yy_nxt[66] =
    {   0,
        4,    5,    6,    7,    8,    4,    4,    9,   10,   10,
       11,   12,    4,    8,    8,    4,   13,   23,   22,   17,
       13,   14,   19,   26,   20,   14,   23,   22,   29,   21,
       29,   29,   27,   29,   15,   26,   15,   18,   25,   18,
       28,   24,   28,   20,   16,   22,   16,   30,    3,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30
    } ;

static const short int yy_chk[66] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    6,   12,   12,   32,
       13,    6,    9,   26,    9,   13,   22,   22,   27,    9,
       29,   27,   24,   29,   31,   23,   31,   33,   21,   33,
       34,   19,   34,   18,   15,   10,    7,    3,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30
    } ;

static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
static int yy_more_flag = 0;
static int yy_more_len = 0;
#define yymore() (yy_more_flag = 1)
#define YY_MORE_ADJ yy_more_len
char *yytext;
# line 1 "lex.l"
# line 2 "lex.l"
/***
 * $Locker: ldl $ $Source: /home/ldl/dbl/RCS/lex.l,v $
 * $Header: /home/ldl/dbl/RCS/lex.l,v 1.6 1994/12/01 07:06:01 ldl Exp ldl $
 */

/***
 *	This is the lexical analyzer for DIBOL.
 */

#include <stdio.h>
#include <ctype.h>
#include "parse.h"
#include "gram.h"


/***
 *	Local functions (used by lexical analyzer only).
 *
 *	Node *				// Created node for builtin
 *	s_builtin(str)			// Lookup builtin function
 *	  char     *str;		// Candidate function
 *
 *	Node *				// Created node for string
 *	s_filter(str)			// Filter string returning node
 *	  char     *str;		// String to filter (e.g. yytext)
 *
 *	Node *				// Created node for kw/dir/id
 *	s_kw_dir_id(str, &t_type)	// Lookup keyword/directive/id
 *        char     *str;		// Candidate keyword/directive/id
 *	  int      *t_type;		// Token classification
 *
 *	Keyword *			// Keyword entry (or NULL)
 *	s_kw_lookup(str, kw_tab)	// Find kw entry in kw table
 *	  char     *str;		// String to lookup
 *	  Keyword   kw_tab[];		// Table of kw entries
 *
 *	void
 *	s_toupper(str)			// Convert string to uppercase
 *	  char     *str;		// String to convert
 */
static
Node     *s_builtin	PROTOARGS((char *));
static
Node     *s_filter	PROTOARGS((char *));
static
Node     *s_kw_dir_id	PROTOARGS((char *, int *));
static
Keyword  *s_kw_lookup	PROTOARGS((char *, Keyword[]));
static
void      s_toupper	PROTOARGS((char *));

/***
 *	Local "globals"
 */
char     *bi_tab[] =			/* Built-in Table		*/
  {					/* ----------------------------	*/
    "%ABS",
    "%ADDR",
    "%ARGA",
    "%ARGN",
    "%B",
    "%BIN",
    "%BIT_IS_CLR",
    "%BIT_IS_SET",
    "%BBBKSTR",
    "%CHAR",
    "%CHOPEN",
    "%CPUTIME",
    "%D",
    "%DATE",
    "%DECML",
    "%DEFINED",
    "%DESCR",
    "%ERLINE",
    "%ERROR",
    "%HEX",
    "%INRANGE",
    "%INSTR",
    "%INT",
    "%INTEGER",
    "%JBNO",
    "%NUMARGS",
    "%O",
    "%OCT",
    "%OUTRANGE",
    "%PACKED",
    "%PASSED",
    "%REF",
    "%RFA",
    "%RSIZE",
    "%RTERM",
    "%SIZE",
    "%STRING",
    "%SUCCESS",
    "%SYSERR",
    "%TIME",
    "%TNMBR",
    "%TTNAME",
    "%TTSTS",
    "%UNSIGNED",
    "%VAL",
    "%VARIANT",
    "%VERSN",
    "%VMS",
    "%WAIT",
    "%WKDAY",
    "%X",
    "%XTRNL",
    "%ZONED",
    { NULL         , -1			}
  };


/**
 *	The lexical rules.
 */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = getc( yyin ); \
		result = c == EOF ? 0 : 1; \
		buf[0] = (char) c; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

# line 120 "lex.l"




	if ( yy_init )
		{
#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( yy_current_buffer )
			yy_init_buffer( yy_current_buffer, yyin );
		else
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();

		yy_init = 0;
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_more_len = 0;
		if ( yy_more_flag )
			{
			yy_more_len = yyleng;
			yy_more_flag = 0;
			}
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 31 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 49 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_USER_ACTION
# line 123 "lex.l"
{		/* Built-in			*/
			  _parse.newline = 0;
			  yylval.node = s_builtin(yytext);
			  return T_BUILTIN;
			}
	YY_BREAK
case 2:
YY_USER_ACTION
# line 129 "lex.l"
{ /* Note: We get here indirectly (usually) from
			   * the lex rule that follows, since there is
			   * some context for when to recognize things.
			   */
			  _parse.newline = 0;
			  yylval.node = s_filter(yytext);
			  return T_O_PERIOD;
			}
	YY_BREAK
case 3:
YY_USER_ACTION
# line 138 "lex.l"
{	/* Keyword/directive/identifier	*/
			  Keyword  *kw;
    			  int       t_type;
			  		/* Is this an operator?		*/
			  if (yytext[0] == '.')
			    {
			      if ( kw = s_kw_lookup(yytext, op_tab) )
NODE			        return kw->kw_tok;
			      if ( kw = s_kw_lookup(yytext, cd_tab) )
NODE			        return kw->kw_tok;
			      REJECT;	/* Return to "." above		*/
			    }
			  _parse.newline = 0;
			  yylval.node = s_kw_dir_id(yytext, &t_type);
			  return t_type;
			}
	YY_BREAK
case 4:
YY_USER_ACTION
# line 155 "lex.l"
{
			  _parse.newline = 0;
			  yylval.node = s_filter(yytext);
			  return T_NUMBER;
			}
	YY_BREAK
case 5:
YY_USER_ACTION
# line 161 "lex.l"
{
			  _parse.newline = 0;
			  if (yytext[strlen(yytext)-1] == '"')
			    yymore();
			  yylval.node = s_filter(yytext);
			  return T_STRING;
			}
	YY_BREAK
case 6:
YY_USER_ACTION
# line 169 "lex.l"
{
			  _parse.newline = 0;
			  if (yytext[strlen(yytext)-1] == '\'')
			    yymore();
			  yylval.node = s_filter(yytext);
			  return T_STRING;
			}
	YY_BREAK
case 7:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_USER_ACTION
# line 177 "lex.l"
{		/* Continuation			*/
    			  int       n_type;
			  _parse.newline = 0;
			}
	YY_BREAK
case 8:
YY_USER_ACTION
# line 182 "lex.l"
{		/* End of line			*/
			  _parse.newline = 1;
			}
	YY_BREAK
case 9:
YY_USER_ACTION
# line 186 "lex.l"
{		/* White space			*/
			}
	YY_BREAK
case 10:
YY_USER_ACTION
# line 189 "lex.l"
{		/* Zigamorphed comment		*/
			}
	YY_BREAK
case 11:
YY_USER_ACTION
# line 192 "lex.l"
{		/* Single character tokens	*/
			  _parse.newline = 0;
			  if (strchr(ch_tok, yytext[0]))
			    return yytext[0];
			  c_warning("unknown character '%c'\n", yytext[0]);
			}
	YY_BREAK
case 12:
YY_USER_ACTION
# line 199 "lex.l"
ECHO;
	YY_BREAK
			case YY_STATE_EOF(INITIAL):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = yy_cp - yytext_ptr - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;

		if ( yy_current_buffer->yy_input_file != yyin )
			{
			/* This can happen if we scan a file, yywrap() returns
			 * 1, and then later the user points yyin at a new
			 * file to resume scanning.  We have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input file.
			 */
			yy_current_buffer->yy_input_file = yyin;
			yy_n_chars = yy_current_buffer->yy_n_chars;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr - 1; /* copy prev. char, too */
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a singled characater, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = yy_c_buf_p - yytext_ptr;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_eof_status != EOF_NOT_SEEN )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset = yy_c_buf_p - b->yy_ch_buf;

			b->yy_buf_size *= 2;
			b->yy_ch_buf = (char *)
				yy_flex_realloc( (void *) b->yy_ch_buf,
						 b->yy_buf_size );

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move - YY_MORE_ADJ == 1 )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_eof_status = EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	/* yytext begins at the second character in yy_ch_buf; the first
	 * character is the one which preceded it before reading in the latest
	 * buffer; it needs to be kept around in case it's a newline, so
	 * yy_get_previous_state() will have with '^' rules active.
	 */

	yytext_ptr = &yy_current_buffer->yy_ch_buf[1];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 31 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 31 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	*yy_state_ptr++ = yy_current_state;
	yy_is_jam = (yy_current_state == 30);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += dest - source;
		yy_bp += dest - source;
		yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	if ( yy_cp > yy_bp && yy_cp[-1] == '\n' )
		yy_cp[-2] = '\n';

	*--yy_cp = (char) c;


	/* Note: the formal parameter *must* be called "yy_bp" for this
	 * macro to now work correctly.
	 */
	YY_DO_BEFORE_ACTION; /* set up yytext again */
	}


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yytext_ptr = yy_c_buf_p;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						{
						yy_c_buf_p =
						yytext_ptr + YY_MORE_ADJ;
						return EOF;
						}

					YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;
					break;

				case EOB_ACT_LAST_MATCH:
#ifdef __cplusplus
					YY_FATAL_ERROR(
					"unexpected last match in yyinput()" );
#else
					YY_FATAL_ERROR(
					"unexpected last match in input()" );
#endif
				}
			}
		}

	c = *yy_c_buf_p;
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );

	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );

	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	yy_flex_free( (void *) b->yy_ch_buf );
	yy_flex_free( (void *) b );
	}


#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif
	{
	b->yy_input_file = file;

	/* We put in the '\n' and start reading from [1] so that an
	 * initial match-at-newline will be true.
	 */

	b->yy_ch_buf[0] = '\n';
	b->yy_n_chars = 1;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[2] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[1];

	b->yy_is_interactive = file ? isatty( fileno(file) ) : 0;

	b->yy_fill_buffer = 1;

	b->yy_eof_status = EOF_NOT_SEEN;
	}


#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		int new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}


static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}


static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}


#ifdef YY_USE_PROTOS
static void yy_fatal_error( const char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( 1 );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n - YY_MORE_ADJ; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strcpy( char *s1, const char *s2 )
#else
static void yy_flex_strcpy( s1, s2 )
char *s1;
const char *s2;
#endif
	{
	while ( (*(s1++) = *(s2++)) )
		;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( unsigned int size )
#else
static void *yy_flex_alloc( size )
unsigned int size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, unsigned int size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
unsigned int size;
#endif
	{
	return (void *) realloc( ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}
# line 199 "lex.l"



/**
 *	Lookup and build a NET node for a builtin function.
 *	Note: This function never allocates a string that needs to be
 *	      freed.  Strings (e.g. builtin name) points to a static.
 */
static
Node *
s_builtin(str)						/* Function	*/
  char     *str;
{
  static
  Keyword   bad_bi = { "%UnknownBuiltin", T_BUILTIN };
  register
  Keyword  *bi;
  
  if (!(bi = s_kw_lookup(str, bi_tab)))	/* Lookup builtin		*/
    {
      c_error("unknown %BUILTIN function '%s'\n", str);
      bi = &bad_bi;			/* Not found, will cause fatal	*/
    }
/* build node */
} /* s_builtin */


/***
 *	Filter string returning node.
 *	Note: This is the only function that returns strings that may
 *	      need to be freed.  All other strings in the NET are
 *	      statically allocated.
 *	Note: If the incoming string starts with a double quote (") or
 *	      single quote ('), then special filtering occurs.  That
 *	      is, the leading and trailing characters are removed (it
 *	      is assumed that the string pattern recognized a string)
 *	      and if two consecutive leading characters are found, then
 *	      one is removed.  For example:
 *		Input			Output
 *		-----------------------	-----------------------	
 *		"Plain text"		Plain text
 *		'Plain text"		Plain text
 *		"Otto's shop"		Otto's shop
 *		'Otto''s shop'		Otto's shop
 *		'He said, "Hi"'		He said, "Hi"
 *		"He said, ""Hi"""	He said, "Hi"
Node *
s_filter(str)						/* Function	*/
  char     *str;
{
  register
  char     *sp, *dp, ch, qt;

  qt = *(sp = dp = str);		/* Get quote character		*/
  if (strchr("\"'", qt) != NULL)	/* If 1st is valid quote char	*/
    {
      sp++;				/* Don't copy the quote 	*/
      qt = '\000';
    }

	/**
	 * Remove quotes from string, in place.
	 */
  while (ch = *sp++)			/* Scan the source string	*/
    {
      if (qt && (ch == qt))		/* Found a quote		*/
        {
          char      nc = *sp++;		/* Look-ahead 'next' character	*/
	  if (nc)			/* Not end-of-string		*/
	    {
	      if (ch == qt)		/* Two quotes is a quoted quote	*/
	        *dp++ = nc;		/* Copy the quote, advancing	*/
	      else
/**
 * Note: if I were a better programmer, I would know whether or not this
 *	 case could ever occur.  I don't think it should, so I am taking
 *	 what I think is the best action, given the situation, and issuing
 *	 some diagnostics.
 */
/**/{ fprintf(stderr, "s_filter: quote qt=%02x and nc=%02x\n", qt, nc);
/*??*/	        *sp = '\000';		/* Kill the string here		*/
/**/}
	    }
       /* else
        *   don't do anything, effectively 'eats' closing quote
	*/
	}
      else
        *dp++ = ch;			/* Copy regular character	*/
    }

  if (qt && (*--sp != qt))		/* Check for closing quote	*/
    c_warning("missing closing %s\n", (qt="'") ? "\"'\"" : "'\"'");

  *dp = ch;				/* Terminate string		*/
  sp = strdup(str);
} /* s_filter */


/***
 *	Handle the cases of keyword, directive and identifier.
 *	Note: For all keywords and directives, the strings in the
 *	      nodes are static, for identifiers, dynamic.
 */
static
Node *
s_kw_dir_id(str, t_type)				/* Function	*/
  char     *str;
  int      *t_type;
{
  static
  Keyword   bad_dir_op = { ".Directive/.Operator", T_BUILTIN };
  Keyword  *kw = (Keyword *)NULL;

  if (str[0] == '.')			/* Is a directive or operator?	*/
    {
      if ( ! (kw = s_kw_lookup(str, cd_tab)) )
        kw = s_kw_lookup(str, op_tab);
    }
  else
    {
      if (_parse.datatype == 0)		/* If datatype, no kw search	*/
        kw = s_kw_lookup(str, kw_tab);

      if ( ! kw )			/* 
      if ( ! (_parse.datatype && (kw = s_kw_lookup(str, kw_tab))) )
      if 
    }
  if (!(bi = s_kw_lookup(str, bi_tab)))	/* Lookup builtin		*/
    {
      c_error("unknown %BUILTIN function '%s'\n", str);
      bi = &bad_bi;
    }
/* build node */
    char     *kw_text;			/* Text to match keyword	*/
    int       kw_tok;			/* Token id to return to parser	*/
Keyword   kw_tab[] =			/* Keyword table		*/
          op_tab[] =		/* Operator Table		*/
          cd_tab[] =		/* Compiler Directives Table	*/
} /* s_kw_dir_id */


/***
 *	Lookup string in Keyword table, returning pointer to entry,
 *	or NULL (if not found).
 */
static
Keyword *
s_kw_lookup(str, kwt)					/* Function	*/
  char     *str;
  Keyword  kwt[];
{
  register
  Keyword *kw = &kwt;

  do					/* Loop through the table	*/
    if (strcmp(kw->kw_text, str) == 0)))
      break;				/* Found entry, break out	*/
  while ((++kw)->kw_text);		/* Try next entry		*/

  return kw->kw_text ? kw : (Keyword *)NULL;
} /* s_kw_lookup */

/***
 *	Filter string converting lower case (civilized) letters to 
 *	upper case (uncouth, if use extensively) letters.
 *
 */
static
void
s_toupper(str)						/* Function	*/
  char    *str;
{
  register
  char    *s, ch;
  
  ch = *(s = str);			/* Prime the pump		*/
  do
    if (islower(ch))			/* If lower (civilized) char	*/
      *s = toupper(ch);			/*   make it uncouth   (shout!)	*/
  while (ch = *++s);			/* Get next character, and loop	*/

} /* s_toupper */


/* End of $Source: /home/ldl/dbl/RCS/lex.l,v $ */
@


1.6
log
@30-Nov-94 Checkpoint
@
text
@d4 1
a4 1
 * $Header: /home/ldl/dbl/RCS/lex.c,v 1.5 1994/11/28 05:26:51 ldl Exp ldl $
d375 2
a376 2
 * $Locker: ldl $ $Source: /home/ldl/dbl/RCS/lex.c,v $
 * $Header: /home/ldl/dbl/RCS/lex.c,v 1.5 1994/11/28 05:26:51 ldl Exp ldl $
d384 1
a384 2
#include <types.h>
#include "node.h"
a387 9
/***
 *	Local typedefs
 */
typedef
struct					/* Keywords			*/
  {					/* ----------------------------	*/
    char     *kw_text;			/* Text to match keyword	*/
    int       kw_tok;			/* Token id to return to parser	*/
  }           KeyWord;
d425 2
a426 2
/**
 * 	Local "global" data values.
d428 1
a428 208
static
Keyword   kw_tab[] =			/* Keyword table		*/
  {					/* ---------------------------- */
    { "ACCEPT"     , T_ACCEPT		},
    { "ALIGN"      , T_ALIGN		},
    { "ALLOC"      , T_ALLOC		},
    { "BEGIN"      , T_BEGIN		},
    { "BKTSIZ"     , T_BKTSIZ		},
    { "BLKSIZ"     , T_BLKSIZ		},
    { "BUFNUM"     , T_BUFNUM		},
    { "BUFSIZ"     , T_BUFSIZ		},
    { "BUILTIN"    , T_BUILTIN		},
    { "BY"         , T_BY		},
    { "CALL"       , T_CALL		},
    { "CLEAR"      , T_CLEAR		},
    { "CLOSE"      , T_CLOSE		},
    { "COMMON"     , T_COMMON		},
    { "CONTIG"     , T_CONTIG		},
    { "COPIES"     , T_COPIES		},
    { "DECR"       , T_DECR		},
    { "DEFAULT"    , T_DEFAULT		},
    { "DELETE"     , T_DELETE		},
    { "DEQ"        , T_DEQ		},
    { "DETACH"     , T_DETACH		},
    { "DISPLAY"    , T_DISPLAY		},
    { "DO"         , T_DO		},
    { "EDIT"       , T_EDIT		},
    { "ELSE"       , T_ELSE		},
    { "END"        , T_END		},
    { "ENDGROUP"   , T_ENDGROUP		},
    { "ENDUSING"   , T_ENDUSING		},
    { "ERASE"      , T_ERASE		},
    { "EXIT"       , T_EXIT		},
    { "EXITLOOP"   , T_EXITLOOP		},
    { "EXTERNAL"   , T_EXTERNAL		},
    { "FDL"        , T_FDL		},
    { "FIND"       , T_FIND		},
    { "FLAGS"      , T_FLAGS		},
    { "FLUSH"      , T_FLUSH		},
    { "FOR"        , T_FOR		},
    { "FORM"       , T_FORM		},
    { "FORMAT"     , T_FORMAT		},
    { "FORMS"      , T_FORMS		},
    { "FRETURN"    , T_FRETURN		},
    { "FROM"       , T_FROM		},
    { "FUNCTION"   , T_FUNCTION		},
    { "GLOBAL"     , T_GLOBAL		},
    { "GOTO"       , T_GOTO		},
    { "GROUP"      , T_GROUP		},
    { "IF"         , T_IF		},
    { "INCR"       , T_INCR		},
    { "KEY"        , T_KEY		},
    { "KEYNUM"     , T_KEYNUM		},
    { "LITERAL"    , T_LITERAL		},
    { "LOCAL"      , T_LOCAL		},
    { "LOCASE"     , T_LOCASE		},
    { "LPNUM"      , T_LPNUM		},
    { "LPQUE"      , T_LPQUE		},
    { "MATCH"      , T_MATCH		},
    { "MODE"       , T_MODE		},
    { "NEXTLOOP"   , T_NEXTLOOP		},
    { "NOP"        , T_NOP		},
    { "NOSUFFIX"   , T_NOSUFFIX		},
    { "NUMREC"     , T_NUMREC		},
    { "OFFERROR"   , T_OFFERROR		},
    { "OFFSET"     , T_OFFSET		},
    { "ONERROR"    , T_ONERROR		},
    { "OPEN"       , T_OPEN		},
    { "POS"        , T_POS		},
    { "PROC"       , T_PROC		},
    { "PROMPT"     , T_PROMPT		},
    { "PROTECT"    , T_PROTECT		},
    { "RANGE"      , T_RANGE		},
    { "READ"       , T_READ		},
    { "READS"      , T_READS		},
    { "RECORD"     , T_RECORD		},
    { "RECSIZ"     , T_RECSIZ		},
    { "RECTYPE"    , T_RECTYPE		},
    { "RECV"       , T_RECV		},
    { "REPEAT"     , T_REPEAT		},
    { "RETURN"     , T_RETURN		},
    { "RFA"        , T_RFA		},
    { "SELECT"     , T_SELECT		},
    { "SEND"       , T_SEND		},
    { "SHARE"      , T_SHARE		},
    { "SLEEP"      , T_SLEEP		},
    { "STOP"       , T_STOP		},
    { "STORE"      , T_STORE		},
    { "SUBROUTINE" , T_SUBROUTINE	},
    { "THEN"       , T_THEN		},
    { "THRU"       , T_THRU		},
    { "UNLOCK"     , T_UNLOCK		},
    { "UNTIL"      , T_UNTIL		},
    { "UPCASE"     , T_UPCASE		},
    { "USING"      , T_USING		},
    { "VIDEO"      , T_VIDEO		},
    { "WAIT"       , T_WAIT		},
    { "WHILE"      , T_WHILE		},
    { "WRITE"      , T_WRITE		},
    { "WRITES"     , T_WRITES		},
    { "XCALL"      , T_XCALL		},
    { "XRETURN"    , T_XRETURN		},
    { NULL         , -1			}
  },      op_tab[] =			/* Operator Table		*/
  {					/* ----------------------------	*/
    { "+"          , T_O_ADD		},
    { "O_AND"      , T_O_AND		},
    { "O_BAND"     , T_O_BAND		},
    { "O_BNOT"     , T_O_BNOT		},
    { "O_BOR"      , T_O_BOR		},
    { "O_BXOR"     , T_O_BXOR		},
    { ".EQ"        , T_O_EQ		},
    { ".EQS"       , T_O_EQS		},
    { ".EQU"       , T_O_EQU		},
    { ".GE"        , T_O_GE		},
    { ".GES"       , T_O_GES		},
    { ".GEU"       , T_O_GEU		},
    { ".GT"        , T_O_GT		},
    { ".GTS"       , T_O_GTS		},
    { ".GTU"       , T_O_GTU		},
    { ".LE"        , T_O_LE		},
    { ".LES"       , T_O_LES		},
    { ".LEU"       , T_O_LEU		},
    { ".LT"        , T_O_LT		},
    { ".LTS"       , T_O_LTS		},
    { ".LTU"       , T_O_LTU		},
    { ".NE"        , T_O_NE		},
    { ".NES"       , T_O_NES		},
    { ".NEU"       , T_O_NEU		},
    { "*"          , T_O_MUL		},
    { "O_NOT"      , T_O_NOT		},
    { "O_OR"       , T_O_OR		},
    { "#"          , T_O_PND		},
    { "##"         , T_O_PNDPND		},
    { "/"          , T_O_DIV		},
    { "//"         , T_O_SLHSLH		},
    { "-"          , T_O_SUB		},
    { "("          , T_O_LPAREN		},
    { ")"          , T_O_RPAREN		},
    { "*"          , T_O_MUL		},
    { ","          , T_O_COMMA		},
    { "."          , T_O_PERIOD		},
    { ":"          , T_O_COLON		},
    { "<"          , T_O_LESS		},
    { "="          , T_O_EQUAL		},
    { ">"          , T_O_GREAT		},
    { "@@"          , T_O_AT		},
    { "["          , T_O_LBRACE		},
    { "]"          , T_O_RBRACE		},
    { "O_XOR"      , T_O_XOR		},
    { NULL         , -1			}
  },      bi_tab[] =			/* Built-in Table		*/
  {					/* ----------------------------	*/
    { "%ABS"       , T_BUILTIN		},
    { "%ADDR"      , T_BUILTIN		},
    { "%ARGA"      , T_BUILTIN		},
    { "%ARGN"      , T_BUILTIN		},
    { "%B"         , T_BUILTIN		},
    { "%BIN"       , T_BUILTIN		},
    { "%BIT_IS_CLR", T_BUILTIN		},
    { "%BIT_IS_SET", T_BUILTIN		},
    { "%BBBKSTR"   , T_BUILTIN		},
    { "%CHAR"      , T_BUILTIN		},
    { "%CHOPEN"    , T_BUILTIN		},
    { "%CPUTIME"   , T_BUILTIN		},
    { "%D"         , T_BUILTIN		},
    { "%DATE"      , T_BUILTIN		},
    { "%DECML"     , T_BUILTIN		},
    { "%DEFINED"   , T_BUILTIN		},
    { "%DESCR"     , T_BUILTIN		},
    { "%ERLINE"    , T_BUILTIN		},
    { "%ERROR"     , T_BUILTIN		},
    { "%HEX"       , T_BUILTIN		},
    { "%INRANGE"   , T_BUILTIN		},
    { "%INSTR"     , T_BUILTIN		},
    { "%INT"       , T_BUILTIN		},
    { "%INTEGER"   , T_BUILTIN		},
    { "%JBNO"      , T_BUILTIN		},
    { "%NUMARGS"   , T_BUILTIN		},
    { "%O"         , T_BUILTIN		},
    { "%OCT"       , T_BUILTIN		},
    { "%OUTRANGE"  , T_BUILTIN		},
    { "%PACKED"    , T_BUILTIN		},
    { "%PASSED"    , T_BUILTIN		},
    { "%REF"       , T_BUILTIN		},
    { "%RFA"       , T_BUILTIN		},
    { "%RSIZE"     , T_BUILTIN		},
    { "%RTERM"     , T_BUILTIN		},
    { "%SIZE"      , T_BUILTIN		},
    { "%STRING"    , T_BUILTIN		},
    { "%SUCCESS"   , T_BUILTIN		},
    { "%SYSERR"    , T_BUILTIN		},
    { "%TIME"      , T_BUILTIN		},
    { "%TNMBR"     , T_BUILTIN		},
    { "%TTNAME"    , T_BUILTIN		},
    { "%TTSTS"     , T_BUILTIN		},
    { "%UNSIGNED"  , T_BUILTIN		},
    { "%VAL"       , T_BUILTIN		},
    { "%VARIANT"   , T_BUILTIN		},
    { "%VERSN"     , T_BUILTIN		},
    { "%VMS"       , T_BUILTIN		},
    { "%WAIT"      , T_BUILTIN		},
    { "%WKDAY"     , T_BUILTIN		},
    { "%X"         , T_BUILTIN		},
    { "%XTRNL"     , T_BUILTIN		},
    { "%ZONED"     , T_BUILTIN		},
    { NULL         , -1			}
  },      cd_tab[] =			/* Compiler Directives Table	*/
d430 53
a482 21
    { ".ALIGN"     , T_CD_ALIGN		},
    { ".END"       , T_CD_END		},
    { ".IDENT"     , T_CD_IDENT		},
    { ".IF"        , T_CD_IF		},
    { ".ELSE"      , T_CD_ELSE		},
    { ".ENDC"      , T_CD_ENDC		},
    { ".IFDEF"     , T_CD_IFDEF		},
    { ".IFNDEF"    , T_CD_IFNDEF	},
    { ".INCLUDE"   , T_CD_INCLUDE	},
    { ".LIST"      , T_CD_LIST		},
    { ".MAIN"      , T_CD_MAIN		},
    { ".NOLIST"    , T_CD_NOLIST	},
    { ".PAGE"      , T_CD_PAGE		},
    { ".PROC"      , T_CD_PROC		},
    { ".PSECT"     , T_CD_PSECT		},
    { ".RESTORE"   , T_CD_RESTORE	},
    { ".SAVE"      , T_CD_SAVE		},
    { ".SHOW"      , T_CD_SHOW		},
    { ".SUBROUTINE", T_CD_SUBROUTINE	},
    { ".SUBTITLE"  , T_CD_SUBTITLE	},
    { ".TITLE"     , T_CD_TITLE		},
d583 1
a583 1
# line 305 "lex.l"
d680 1
a680 1
# line 308 "lex.l"
d689 1
a689 1
# line 314 "lex.l"
d701 1
a701 1
# line 323 "lex.l"
d721 1
a721 1
# line 340 "lex.l"
d730 1
a730 1
# line 346 "lex.l"
d741 1
a741 1
# line 354 "lex.l"
d755 1
a755 1
# line 362 "lex.l"
d763 1
a763 1
# line 367 "lex.l"
d770 1
a770 1
# line 371 "lex.l"
d776 1
a776 1
# line 374 "lex.l"
d782 1
a782 1
# line 377 "lex.l"
d792 1
a792 1
# line 384 "lex.l"
d1484 1
a1484 1
# line 384 "lex.l"
d1670 1
a1670 1
/* End of $Source: /home/ldl/dbl/RCS/lex.c,v $ */
@


1.5
log
@27-Nov-94 Checkpoint
@
text
@d4 1
a4 1
 * $Header: /home/ldl/dbl/RCS/lex.c,v 1.4 1994/11/26 08:23:48 ldl Exp ldl $
d376 1
a376 1
 * $Header: /home/ldl/dbl/RCS/lex.c,v 1.4 1994/11/26 08:23:48 ldl Exp ldl $
@


1.4
log
@25-Nov-94 Checkpoint (Early A.M. on the 26th)
@
text
@d4 1
a4 1
 * $Header: flex.skl,v 1.2 94/01/04 14:33:15 vern Exp $
d375 2
a376 2
 * $Locker: ldl $ $Source: /home/ldl/dbl/RCS/lex.l,v $
 * $Header: /home/ldl/dbl/RCS/lex.l,v 1.3 1994/11/22 14:26:54 ldl Exp ldl $
d1855 1
a1855 1
/* End of $Source: /home/ldl/dbl/RCS/lex.l,v $ */
@
